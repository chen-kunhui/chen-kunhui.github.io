<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker-kubectl-install</title>
      <link href="/2019/11/14/docker-kubectl-install/"/>
      <url>/2019/11/14/docker-kubectl-install/</url>
      
        <content type="html"><![CDATA[<h1 id="kubectl-安装"><a href="#kubectl-安装" class="headerlink" title="kubectl 安装"></a>kubectl 安装</h1><blockquote><p>原文：<a href="https://www.kubernetes.org.cn/installkubectl" target="_blank" rel="noopener">https://www.kubernetes.org.cn/installkubectl</a></p></blockquote><p>kubectl 是 Kubernetes 命令行工具,可以在Kubernetes上部署和管理应用程序，可以检查集群资源，创建，删除和更新组件</p><p>以下是安装kubectl的几种方法</p><h2 id="第二种：直接下载-kubectl-二进制文件"><a href="#第二种：直接下载-kubectl-二进制文件" class="headerlink" title="第二种：直接下载 kubectl 二进制文件"></a>第二种：直接下载 kubectl 二进制文件</h2><h3 id="1-下载可执行文件"><a href="#1-下载可执行文件" class="headerlink" title="1.下载可执行文件"></a>1.下载可执行文件</h3><p>这里以 v1.16.3 版本为例，最新的稳定版本号可访问<a href="https://storage.googleapis.com/kubernetes-release/release/stable.txt" target="_blank" rel="noopener">这里</a>获取</p><h4 id="MacOS-版本"><a href="#MacOS-版本" class="headerlink" title="MacOS 版本"></a>MacOS 版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.3/bin/darwin/amd64/kubectl</span><br></pre></td></tr></table></figure><h4 id="Linux-版本"><a href="#Linux-版本" class="headerlink" title="Linux 版本"></a>Linux 版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.3/bin/darwin/amd64/kubectl</span><br></pre></td></tr></table></figure><h4 id="window-版本"><a href="#window-版本" class="headerlink" title="window 版本"></a>window 版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.3/bin/windows/amd64/kubectl.exe</span><br></pre></td></tr></table></figure><h3 id="2-将可执行文件添加可执行权限，然后添加到-PATH-中，或放置到-usr-local-bin-这样的位置"><a href="#2-将可执行文件添加可执行权限，然后添加到-PATH-中，或放置到-usr-local-bin-这样的位置" class="headerlink" title="2. 将可执行文件添加可执行权限，然后添加到 PATH 中，或放置到 /usr/local/bin 这样的位置"></a>2. 将可执行文件添加可执行权限，然后添加到 PATH 中，或放置到 /usr/local/bin 这样的位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x kubectl</span><br><span class="line">mv kubectl /usr/local/bin</span><br><span class="line">kubectl version</span><br></pre></td></tr></table></figure><h2 id="第一种：通过包管理工具安装"><a href="#第一种：通过包管理工具安装" class="headerlink" title="第一种：通过包管理工具安装"></a>第一种：通过包管理工具安装</h2><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><p>如果您在Ubuntu或其他支持快照包管理器的Linux发行版之一，您可以使用以下安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install kubectl --classic</span><br></pre></td></tr></table></figure></p><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><h4 id="通过-Docker-Desktop-安装"><a href="#通过-Docker-Desktop-安装" class="headerlink" title="通过 Docker Desktop 安装"></a>通过 Docker Desktop 安装</h4><p>打开 Docker Desktop &gt; 选择 preferences &gt; Kubernetes &gt; 勾选 Enable Kubernetes</p><h4 id="第二种命令行方式"><a href="#第二种命令行方式" class="headerlink" title="第二种命令行方式"></a>第二种命令行方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectl</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-build-local-docker-hub</title>
      <link href="/2019/11/13/docker-build-local-docker-hub/"/>
      <url>/2019/11/13/docker-build-local-docker-hub/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建本地的-docker-hub"><a href="#搭建本地的-docker-hub" class="headerlink" title="搭建本地的 docker hub"></a>搭建本地的 docker hub</h1><h2 id="1-拉取-registry-镜像"><a href="#1-拉取-registry-镜像" class="headerlink" title="1.拉取 registry 镜像"></a>1.拉取 registry 镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull registry</span></span><br></pre></td></tr></table></figure><h2 id="2-启动容器"><a href="#2-启动容器" class="headerlink" title="2.启动容器"></a>2.启动容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 5000:5000 --restart=always --name registry registry</span></span><br></pre></td></tr></table></figure><blockquote><p>—restart=always 可以理解为每次重启docker时都重启容器</p></blockquote><p>默认情况下，仓库会被创建在容器的 /var/lib/registry 目录下。你可以通过 -v 参数来将镜像文件存放在本地的指定路径， 例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v /opt/data/registry:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure><h2 id="3-本地创建一个镜像"><a href="#3-本地创建一个镜像" class="headerlink" title="3.本地创建一个镜像"></a>3.本地创建一个镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; Dockerfile &lt;&lt;EOF</span><br><span class="line">FROM ubuntu</span><br><span class="line">CMD echo &quot;hello .....&quot;</span><br><span class="line">EOF</span><br><span class="line">$ docker build ./ -t 127.0.0.1:5000/hello:1.0.1</span><br></pre></td></tr></table></figure><h2 id="4-将镜像推到本地的-docker-hub"><a href="#4-将镜像推到本地的-docker-hub" class="headerlink" title="4.将镜像推到本地的 docker hub"></a>4.将镜像推到本地的 docker hub</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push 127.0.0.1:5000/hello:1.0.1</span><br></pre></td></tr></table></figure><h2 id="5-查看本地的-docker-hub-上有那些仓库"><a href="#5-查看本地的-docker-hub-上有那些仓库" class="headerlink" title="5.查看本地的 docker hub 上有那些仓库"></a>5.查看本地的 docker hub 上有那些仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl 127.0.0.1:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;hello&quot;]&#125;</span><br></pre></td></tr></table></figure><h2 id="6-将本地制作的镜像删除，从搭建的-docker-hub-上重新拉取"><a href="#6-将本地制作的镜像删除，从搭建的-docker-hub-上重新拉取" class="headerlink" title="6.将本地制作的镜像删除，从搭建的 docker hub 上重新拉取"></a>6.将本地制作的镜像删除，从搭建的 docker hub 上重新拉取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi 127.0.0.1:5000/hello:1.0.1</span><br><span class="line">$ docker pull 127.0.0.1:5000/hello:1.0.1</span><br></pre></td></tr></table></figure><h2 id="7-测试新拉下来的镜像"><a href="#7-测试新拉下来的镜像" class="headerlink" title="7.测试新拉下来的镜像"></a>7.测试新拉下来的镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run 127.0.0.1:5000/hello:1.0.1</span><br><span class="line">hello .....</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://docs.docker.com/registry/spec/api/" target="_blank" rel="noopener">Registry API</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-install</title>
      <link href="/2019/11/13/docker-install/"/>
      <url>/2019/11/13/docker-install/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-from-a-package" target="_blank" rel="noopener">安装</a></h1><h2 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1. 下载安装包"></a>1. <a href="https://download.docker.com/linux/ubuntu/dists/" target="_blank" rel="noopener">下载</a>安装包</h2><blockquote><p>请根据系统版本下载对于的 deb 包，可以通过 <code>sudo lsb_release -a</code> 查看系统版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/docker-ce_18.03.1~ce~3-0~ubuntu_amd64.deb</span></span><br></pre></td></tr></table></figure><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i docker-ce_18.03.1~ce~3-0~ubuntu_amd64.deb</span></span><br></pre></td></tr></table></figure><h2 id="3-运行-hello-world-示例"><a href="#3-运行-hello-world-示例" class="headerlink" title="3. 运行 hello-world 示例"></a>3. 运行 hello-world 示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure><h2 id="4-将普通用户添加到-docker-组，避免每次都需要使用-sodu-命令"><a href="#4-将普通用户添加到-docker-组，避免每次都需要使用-sodu-命令" class="headerlink" title="4. 将普通用户添加到 docker 组，避免每次都需要使用 sodu 命令"></a>4. 将普通用户添加到 docker 组，避免每次都需要使用 sodu 命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker your_username</span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><h2 id="5-修改-docker-hub-仓库地址"><a href="#5-修改-docker-hub-仓库地址" class="headerlink" title="5. 修改 docker hub 仓库地址"></a>5. 修改 docker hub 仓库地址</h2><p>有时默认的 docker hub 地址下载镜像时会很慢，可以更改为国内的镜像</p><h3 id="1-在-etc-docker-daemon-json-加入以下内容"><a href="#1-在-etc-docker-daemon-json-加入以下内容" class="headerlink" title="1. 在 /etc/docker/daemon.json 加入以下内容"></a>1. 在 <code>/etc/docker/daemon.json</code> 加入以下内容</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-重启-docker"><a href="#2-重启-docker" class="headerlink" title="2. 重启 docker"></a>2. 重启 docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-common-operation</title>
      <link href="/2019/11/13/linux-common-operation/"/>
      <url>/2019/11/13/linux-common-operation/</url>
      
        <content type="html"><![CDATA[<h1 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h1><p>useradd 和 adduser 的区别<br>| comamd | description |<br>| —- | —- |<br>| useradd | useradd是一个linux命令，仅添加用户，不会在 /home 下创建目录 |<br>| adduser | adduser是一个perl 脚本，它会添加用户和用户组，并在 /home 目录创建目录 |</p><p>example:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">_$ adduser xxx</span></span><br><span class="line">  or</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">_$ useradd xxx</span></span><br></pre></td></tr></table></figure></p><h1 id="给普通用户添加-sudo-权限"><a href="#给普通用户添加-sudo-权限" class="headerlink" title="给普通用户添加 sudo 权限"></a>给普通用户添加 sudo 权限</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;chenkh    ALL=(ALL:ALL) ALL&apos; &gt;&gt; /etc/sudoers</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grpc-go-demo</title>
      <link href="/2019/11/10/grpc-go-demo/"/>
      <url>/2019/11/10/grpc-go-demo/</url>
      
        <content type="html"><![CDATA[<h1 id="第一步安装-go"><a href="#第一步安装-go" class="headerlink" title="第一步安装 go"></a>第一步安装 go</h1><p>go 安装这里不做介绍，需要注意的是 go 版本需要 1.9 以上<br>安装完 go 后记得设置 GOPATH 环境变量，并把 $GOPATH/bin 添加到环境变量 PATH 中</p><h1 id="第二步安装-Protocol-Buffers-编译工具"><a href="#第二步安装-Protocol-Buffers-编译工具" class="headerlink" title="第二步安装 Protocol Buffers 编译工具"></a>第二步安装 Protocol Buffers 编译工具</h1><blockquote><p>源码地址：<a href="https://github.com/protocolbuffers/protobuf" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf</a></p></blockquote><ol><li>下载安装包</li></ol><blockquote><p><a href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf/releases</a></p></blockquote><p>可选择 protobuf-all-xxx.tar.gz 也可选择 protobuf-xxx-linux-x86_64.zip<br>区别在于一个是包含全部语言的，一个是仅包含 go 语言的</p><ol><li>解压后在bin目录下有 <code>protoc</code> 可执行文件，可用来编译 Protocol Buffer 格式文件，但还不能编译 service 部分</li></ol><p>将解压后的bin 目录加到环境变量 PATH 中，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ~/.bashrc</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:/解压protocbuf的目录/bin</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;_$ source ~/.bashrc</span><br></pre></td></tr></table></figure><h1 id="第三部安装-go-的-grpc-包及-protoc-gen-go"><a href="#第三部安装-go-的-grpc-包及-protoc-gen-go" class="headerlink" title="第三部安装 go 的 grpc 包及 protoc-gen-go"></a>第三部安装 go 的 grpc 包及 protoc-gen-go</h1><blockquote><p>源码地址：<a href="https://github.com/grpc/grpc-go" target="_blank" rel="noopener">https://github.com/grpc/grpc-go</a></p></blockquote><p>通过 go 命令安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u goole.golang.org/grpc</span><br><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure></p><p>通过离线安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/grpc/grpc-go.git $GOPATH/src/google.golang.org/grpc</span><br><span class="line">git clone https://github.com/golang/net.git $GOPATH/src/golang.org/x/net</span><br><span class="line">git clone https://github.com/golang/text.git $GOPATH/src/golang.org/x/text</span><br><span class="line">git clone https://github.com/golang/protobuf.git $GOPATH/src/github.com/golang/protobuf</span><br><span class="line">git clone https://github.com/google/go-genproto.git $GOPATH/src/google.golang.org/genproto</span><br><span class="line">cd $GOPATH/src/</span><br><span class="line">go install google.golang.org/grpc</span><br><span class="line">cd $GOPATH/src/github.com/golang/protobuf/protoc-gen-go</span><br><span class="line">go build</span><br><span class="line">go install</span><br></pre></td></tr></table></figure></p><h1 id="第三部-编写demo-代码"><a href="#第三部-编写demo-代码" class="headerlink" title="第三部 编写demo 代码"></a>第三部 编写demo 代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src</span><br><span class="line">mkdir go-grpc-demo &amp;&amp; cd go-grpc-demo</span><br><span class="line">mkdir protocs</span><br></pre></td></tr></table></figure><p>在 protocs 下创建一个helloworld.proto 文件，内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// Copyright 2015 gRPC authors.</span><br><span class="line">//</span><br><span class="line">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">// you may not use this file except in compliance with the License.</span><br><span class="line">// You may obtain a copy of the License at</span><br><span class="line">//</span><br><span class="line">//     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">//</span><br><span class="line">// Unless required by applicable law or agreed to in writing, software</span><br><span class="line">// distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">// See the License for the specific language governing permissions and</span><br><span class="line">// limitations under the License.</span><br><span class="line"></span><br><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">option java_multiple_files = true;</span><br><span class="line">option java_package = &quot;io.grpc.examples.helloworld&quot;;</span><br><span class="line">option java_outer_classname = &quot;HelloWorldProto&quot;;</span><br><span class="line"></span><br><span class="line">package helloworld;</span><br><span class="line"></span><br><span class="line">// The greeting service definition.</span><br><span class="line">service Greeter &#123;</span><br><span class="line">  // Sends a greeting</span><br><span class="line">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The request message containing the user&apos;s name.</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The response message containing the greetings</span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译proto 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir helloworld</span><br><span class="line">protoc -I protocs/ protocs/helloworld.proto --go_out=plugins=grpc:helloworld</span><br></pre></td></tr></table></figure></p><p>创建服务端，创建 greeter_server/main.go 文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> *</span><br><span class="line"> * Copyright 2015 gRPC authors.</span><br><span class="line"> *</span><br><span class="line"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"> * you may not use this file except in compliance with the License.</span><br><span class="line"> * You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License for the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">//go:generate protoc -I ../helloworld --go_out=plugins=grpc:../helloworld ../helloworld/helloworld.proto</span><br><span class="line"></span><br><span class="line">// Package main implements a server for Greeter service.</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net&quot;</span><br><span class="line"></span><br><span class="line">&quot;google.golang.org/grpc&quot;</span><br><span class="line">pb &quot;../helloworld&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">port = &quot;:50051&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// server is used to implement helloworld.GreeterServer.</span><br><span class="line">type server struct &#123;</span><br><span class="line">pb.UnimplementedGreeterServer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SayHello implements helloworld.GreeterServer</span><br><span class="line">func (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) &#123;</span><br><span class="line">log.Printf(&quot;Received: %v&quot;, in.GetName())</span><br><span class="line">return &amp;pb.HelloReply&#123;Message: &quot;Hello &quot; + in.GetName()&#125;, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">lis, err := net.Listen(&quot;tcp&quot;, port)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatalf(&quot;failed to listen: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer()</span><br><span class="line">pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line">if err := s.Serve(lis); err != nil &#123;</span><br><span class="line">log.Fatalf(&quot;failed to serve: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run greeter_server/main.go</span><br></pre></td></tr></table></figure></p><p>创建客户端，创建 greeter_client/main.go 文件，内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> *</span><br><span class="line"> * Copyright 2015 gRPC authors.</span><br><span class="line"> *</span><br><span class="line"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"> * you may not use this file except in compliance with the License.</span><br><span class="line"> * You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License for the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// Package main implements a client for Greeter service.</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line"></span><br><span class="line">&quot;google.golang.org/grpc&quot;</span><br><span class="line">pb &quot;../helloworld&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">address     = &quot;localhost:50051&quot;</span><br><span class="line">defaultName = &quot;world&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// Set up a connection to the server.</span><br><span class="line">conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatalf(&quot;did not connect: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">defer conn.Close()</span><br><span class="line">c := pb.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line">// Contact the server and print out its response.</span><br><span class="line">name := defaultName</span><br><span class="line">if len(os.Args) &gt; 1 &#123;</span><br><span class="line">name = os.Args[1]</span><br><span class="line">&#125;</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">defer cancel()</span><br><span class="line">r, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: name&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatalf(&quot;could not greet: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(&quot;Greeting: %s&quot;, r.GetMessage())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动客户端，可看到拿到了数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;_$ go run greeter_client/main.go</span><br><span class="line">2019/11/10 23:57:50 Greeting: Hello world</span><br></pre></td></tr></table></figure></p><p>客户端或服务端可以是其他语言的，比如 ruby 等，只要将 protoc 编译成ruby的即可，grpc 是跨语言的</p><blockquote><p>以上代码均引用自官方demo: <a href="https://github.com/grpc/grpc-go/tree/master/examples" target="_blank" rel="noopener">https://github.com/grpc/grpc-go/tree/master/examples</a></p></blockquote><h1 id="其他相关资料"><a href="#其他相关资料" class="headerlink" title="其他相关资料"></a>其他相关资料</h1><ul><li><a href="https://developers.google.com/protocol-buffers/docs/gotutorial" target="_blank" rel="noopener">protocol buffers doc</a></li><li><a href="https://www.grpc.io/docs/" target="_blank" rel="noopener">grpc doc</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/2019/11/10/vim/"/>
      <url>/2019/11/10/vim/</url>
      
        <content type="html"><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p><code>Vex</code> : 分割当前窗口，流量文件系统</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux systemctl 管理服务 与 service 管理服务</title>
      <link href="/2019/05/18/linux-systemctl-and-service/"/>
      <url>/2019/05/18/linux-systemctl-and-service/</url>
      
        <content type="html"><![CDATA[<p>较新的发行版一般使用 systemctl</p><h1 id="查看系统以生什么命令来管理服务"><a href="#查看系统以生什么命令来管理服务" class="headerlink" title="查看系统以生什么命令来管理服务"></a>查看系统以生什么命令来管理服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -p 1</span><br></pre></td></tr></table></figure><h1 id="service-命令管理服务"><a href="#service-命令管理服务" class="headerlink" title="service 命令管理服务"></a>service 命令管理服务</h1><p>以 elasticsearch 为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo service elasticsearch start</span><br><span class="line">sudo service elasticsearch stop</span><br><span class="line">sudo service elasticsearch restart</span><br><span class="line">sudo service elasticsearch status</span><br></pre></td></tr></table></figure><p>设置开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d elasticsearch defaults 95 10</span><br></pre></td></tr></table></figure></p><p>启动脚本位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/elasticsearch</span><br></pre></td></tr></table></figure></p><blockquote><p><code>sudo service elasticsearch start</code> 其实相当于 <code>bash /etc/init.d/elasticsearch start</code></p></blockquote><h1 id="systemctl-命令管理服务"><a href="#systemctl-命令管理服务" class="headerlink" title="systemctl 命令管理服务"></a>systemctl 命令管理服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start elasticsearch.service</span><br><span class="line">sudo systemctl stop elasticsearch.service</span><br><span class="line">sudo systemctl restart elasticsearch.service</span><br><span class="line">sudo systemctl status elasticsearch.service</span><br></pre></td></tr></table></figure><p>设置开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable elasticsearch.service</span><br></pre></td></tr></table></figure></p><p>启动文件位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/systemd/system/elasticsearch.service</span><br></pre></td></tr></table></figure></p><p>查看后台日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl -f</span><br><span class="line">sudo journalctl --unit elasticsearch</span><br><span class="line">sudo journalctl --unit elasticsearch --since  &quot;2016-10-30 18:17:16&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p><a href="https://www.freedesktop.org/software/systemd/man/journalctl.htmlß" target="_blank" rel="noopener">https://www.freedesktop.org/software/systemd/man/journalctl.htmlß</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>scp, sftp 传输文件</title>
      <link href="/2019/04/29/linux-scp-note/"/>
      <url>/2019/04/29/linux-scp-note/</url>
      
        <content type="html"><![CDATA[<h1 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h1><p>下载文件到本地</p><pre><code># 拷贝 10.183.234.111 主机的 /home/username/test.log 文件到本地的当前目录下scp username@10.183.234.111/home/username/test.log ./# 拷贝 10.183.234.111主机的 /home/username/dir 目录及内容到本地的当前目录下scp -r username@10.183.234.111/home/username/dir ./</code></pre><p>上传文件到远程机器</p><pre><code># 将本地当前目录下的 test.rb 文件上传到 10.183.234.111 主机的 /home/username 目录下scp test.rb username@10.183.234.111/home/username# 将本地当前目录下的 test_dir 目录及内容上传到 10.183.234.111 主机的 /home/username 目录下scp -r test_dir username@10.183.234.111/home/username</code></pre><h1 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h1><blockquote><p>引用 <a href="https://www.cnblogs.com/Xbingbing/p/8504818.html" target="_blank" rel="noopener">https://www.cnblogs.com/Xbingbing/p/8504818.html</a></p></blockquote><p>sftp 是一个交互式文件传输程式。它类似于 ftp, 但它进行加密传输，比FTP有更高的安全性。</p><h2 id="常用登陆方式："><a href="#常用登陆方式：" class="headerlink" title="常用登陆方式："></a>常用登陆方式：</h2><p>格式：sftp user@host</p><p>通过 sftp 连接 host，端口为默认的 22，指定用户 user。</p><h2 id="查看sftp支持的命令"><a href="#查看sftp支持的命令" class="headerlink" title="查看sftp支持的命令"></a>查看sftp支持的命令</h2><p>使用help命令，查看支持的命令，如：</p><pre><code>help</code></pre><p>(其中命令前面有“l”表示本地执行，其他表示在所登录的远程主机上面执行)</p><h2 id="基本的使用"><a href="#基本的使用" class="headerlink" title="基本的使用"></a>基本的使用</h2><p>sftp主要是用来传输文件的，包括上传文件(从本机到远程主机) ，下载文件(从远程主机到本机)。</p><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><pre><code>get [-Ppr] remote [local]# 将远程当前目录下的文件test.cpp下载到本地当前目录的Project文件夹中。get test.cpp Project/# 将远程目录 abc 下载到本地当前目录的Project文件夹中。get -r abc Project/ 或者 get -R abc Project/</code></pre><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><pre><code>put [-Ppr] local [remote]#将本地/home/Xbingbing/Software/目录下的ios文件传送到远程登陆主机的/home/Xbingbing/Blog/目录下。put /home/Xbingbing/Software/RHEL_5.5x86_64.iso /home/Xbing bing/Blog/# 将本地目录 abc下的内容推送到远程的 Project 目录下put -r abc Project/ 或者 put -R abc Project/</code></pre><h3 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h3><p>退出命令：</p><pre><code>bye                                Quit sftpexit                               Quit sftpquit                               Quit sftp</code></pre><p>其他命令：</p><pre><code>progress                           Toggle display of progress meterversion                            Show SFTP version!command                           Execute &#39;command&#39; in local shell!                                  Escape to local shell?                                  Synonym for helphelp                               Display this help text</code></pre><p>上传下载：</p><pre><code>put [-afPpRr] local [remote]       Upload fileget [-afPpRr] remote [local]       Download filereget [-fPpRr] remote [local]      Resume download filereput [-fPpRr] [local] remote      Resume upload file</code></pre><p>对远程主机操作：</p><pre><code>cd path                            Change remote directory to &#39;path&#39;chgrp grp path                     Change group of file &#39;path&#39; to &#39;grp&#39;chmod mode path                    Change permissions of file &#39;path&#39; to &#39;mode&#39;chown own path                     Change owner of file &#39;path&#39; to &#39;own&#39;rename oldpath newpath             Rename remote filerm path                            Delete remote filermdir path                         Remove remote directorysymlink oldpath newpath            Symlink remote filemkdir path                         Create remote directorypwd                                Display remote working directorydf [-hi] [path]                    Display statistics for current directory or                                   filesystem containing &#39;path&#39;</code></pre><p>对本地操作：</p><pre><code>lcd path                           Change local directory to &#39;path&#39;lls [ls-options [path]]            Display local directory listinglmkdir path                        Create local directoryln [-s] oldpath newpath            Link remote file (-s for symlink)lpwd                               Print local working directoryls [-1afhlnrSt] [path]             Display remote directory listinglumask umask                       Set local umask to &#39;umask&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> cmd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ssh 笔记</title>
      <link href="/2019/04/29/linux-ssh-note/"/>
      <url>/2019/04/29/linux-ssh-note/</url>
      
        <content type="html"><![CDATA[<h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><p>生成 ssh key</p><pre><code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></pre><p>将 ssh key 添加到目标主机，从而实现免密登陆</p><pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.0.22</code></pre><blockquote><p>该操作相对于将 ssh 公钥复制粘贴到 192.168.0.22 机器 root 用户 ~/.ssh/authorized_keys 文件中</p></blockquote><p>远程执行 shell 命令</p><pre><code>ssh  root@192.168.0.22 &quot;echo hello&quot;</code></pre><p>登陆远程主机</p><pre><code>ssh root@192.168.0.22</code></pre><p>关闭ssh连接时提示的yes和no</p><pre><code>ssh -o StrictHostKeyChecking=no 58.221.186.137</code></pre><p>或者</p><pre><code>cat &gt; ~/.ssh/config &lt;&lt; endUserKnownHostsFile /dev/nullConnectTimeout 15StrictHostKeyChecking noend</code></pre><h1 id="sshd-配置文件-sshd-config"><a href="#sshd-配置文件-sshd-config" class="headerlink" title="sshd 配置文件 sshd_config"></a>sshd 配置文件 sshd_config</h1><div class="table-container"><table><thead><tr><th>配置</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>ClientAliveInterval</td><td>int</td><td>指定服务器端向客户端请求消息的时间间隔</td></tr><tr><td>ClientAliveCountMax</td><td>int</td><td>服务器发出多少次请求后客户端没有响应则自动断开</td></tr><tr><td>PermitRootLogin</td><td>yes/no</td><td>是否允许root用户远程登录</td></tr></tbody></table></div><h1 id="查看登陆历史"><a href="#查看登陆历史" class="headerlink" title="查看登陆历史"></a>查看登陆历史</h1><div class="table-container"><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>last</td><td>查看近期的历史</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> cmd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell 脚本简记</title>
      <link href="/2019/04/27/linux-shell-note/"/>
      <url>/2019/04/27/linux-shell-note/</url>
      
        <content type="html"><![CDATA[<h1 id="shell-特殊变量"><a href="#shell-特殊变量" class="headerlink" title="shell 特殊变量"></a>shell 特殊变量</h1><pre><code>$$    当前进程的pid$!    最近一个后台任务的pid$?    上一条命令的退出码$*    参数列表，如：&quot;$1 $2 ..&quot;$@    参数列表，如：&quot;$1&quot; &quot;$2&quot; ..$#    参数个数$0    当前脚本文件名$1~$n 脚本传入的第n个参数</code></pre><h1 id="shell-中定义本地变量，local-关键字"><a href="#shell-中定义本地变量，local-关键字" class="headerlink" title="shell 中定义本地变量，local 关键字"></a>shell 中定义本地变量，local 关键字</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">a=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的 a 与外面的 a 共用</span></span><br><span class="line"><span class="function"><span class="title">fun1</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$a</span> <span class="comment">#=&gt; 1</span></span><br><span class="line">  a=2     <span class="comment"># 这里会同时改变外部的 a</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$a</span> <span class="comment">#=&gt; 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的 a 将只在 fun2 中有效，与外面的 a 相互独立</span></span><br><span class="line"><span class="function"><span class="title">fun2</span></span>()&#123;</span><br><span class="line">  <span class="built_in">local</span> a</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$a</span> <span class="comment">#=&gt; ''</span></span><br><span class="line">  a=2     <span class="comment"># 这里不会改变外部的 a</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$a</span> <span class="comment">#=&gt; 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br><span class="line">a=1</span><br><span class="line">fun2</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br></pre></td></tr></table></figure><h1 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;10;i++));<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="while-循环读取文件"><a href="#while-循环读取文件" class="headerlink" title="while 循环读取文件"></a>while 循环读取文件</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [[ <span class="variable">$line</span> -ne 0 ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$line</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; file_ptah</span><br></pre></td></tr></table></figure><h1 id="if-分支控制"><a href="#if-分支控制" class="headerlink" title="if 分支控制"></a>if 分支控制</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ 条件，或命令，非0退出则为<span class="literal">false</span> ]];<span class="keyword">then</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">elif</span> [[ 条件，或命令，非0退出则为<span class="literal">false</span> ]];<span class="keyword">then</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1 id="case"><a href="#case" class="headerlink" title="case"></a>case</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> $变量名 <span class="keyword">in</span></span><br><span class="line"><span class="string">"值 1"</span>)</span><br><span class="line">  ....</span><br><span class="line">  ;;</span><br><span class="line"><span class="string">"值 2"</span>)</span><br><span class="line">  ....</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">arr=(a b <span class="string">"c"</span> d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[0]&#125;</span>  <span class="comment">#=&gt; a</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[2]&#125;</span>  <span class="comment">#=&gt; c</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[55]&#125;</span> <span class="comment">#=&gt; ''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值</span></span><br><span class="line">arr[55]=f</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[55]&#125;</span> <span class="comment">#=&gt; f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"数组长度: <span class="variable">$&#123;#arr[@]&#125;</span>"</span>     <span class="comment">#=&gt; 数组长度: 5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"数组长度: <span class="variable">$&#123;#arr[*]&#125;</span>"</span>     <span class="comment">#=&gt; 数组长度: 5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"数组的元素为: <span class="variable">$&#123;arr[@]&#125;</span>"</span>  <span class="comment">#=&gt; 数组的元素为: a b c d f</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"数组的元素为: <span class="variable">$&#123;arr[*]&#125;</span>"</span>  <span class="comment">#=&gt; 数组的元素为: a b c d f</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"数组下标: <span class="variable">$&#123;!arr[@]&#125;</span>"</span>    <span class="comment">#=&gt;数组下标: 0 1 2 3 55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以写成for element in $&#123;array[*]&#125;</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> <span class="variable">$&#123;arr[@]&#125;</span>;<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$element</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类hash</span></span><br><span class="line">arr[g]=88</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[g]&#125;</span> <span class="comment">#=&gt; 88</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell 模拟并发</title>
      <link href="/2019/04/27/linux_asyn_shell/"/>
      <url>/2019/04/27/linux_asyn_shell/</url>
      
        <content type="html"><![CDATA[<p>在一个 shell 脚本中，通过用 &amp; 的方式将一条命令或一个方法放到后台执行，相当于又起来一个子进程<br>在其启动子进程的后面紧接用变量 $! 可以获得该子任务进程的 pid<br>脚本中可以通过 wait 方式，等待该进程执行完才推出，从而在shell脚步中实现并发</p><p>wait 不加参数 相当于等待所有子进程结束，wait + 子进程 pid 相当于等待某个子进程结束</p><p>注意，shell 脚步退出了，他的子进程并不会跟着推出，因为他们之间是独立的进程<br>同样在子任务中调用 exit 退出子任务，并不会影响 shell 脚步继续执行</p><p>PID是程序被操作系统加载到内存成为进程后动态分配的资源。<br>PPID（parent process ID）：PPID是程序的父进程号。</p><p>父进程退出并不会通知子进程推出，子进程会被pid 为1 的init进程领养</p><p>过多的子进程是会拖慢运行速度的</p><p>shell 模拟并发脚本:</p><blockquote><p>note: 在脚本中如果强制父进程退出了，子进程如果还在运行并不会退出</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">start_time=$(date +%s)</span><br><span class="line">root_path=$(<span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的退出状态码统一保存的文件</span></span><br><span class="line">RESULT_FILE=<span class="string">"<span class="variable">$&#123;root_path&#125;</span>/<span class="variable">$&#123;0&#125;</span>.result.log"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 避免有残留数据</span></span><br><span class="line">rm -rf <span class="variable">$RESULT_FILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个子进程运行命令，实现并发</span></span><br><span class="line"><span class="function"><span class="title">run_in_asyn</span></span>()&#123;</span><br><span class="line">  run_cmd <span class="variable">$@</span> &amp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将命令的执行结果保存到一个文件中</span></span><br><span class="line"><span class="function"><span class="title">run_cmd</span></span>()&#123;</span><br><span class="line">  <span class="built_in">local</span> cmd=<span class="variable">$@</span></span><br><span class="line">  <span class="built_in">eval</span> <span class="variable">$cmd</span></span><br><span class="line">  <span class="built_in">echo</span> $? &gt;&gt; <span class="variable">$RESULT_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断子进程是否有执行失败的</span></span><br><span class="line"><span class="function"><span class="title">is_success</span></span>()&#123;</span><br><span class="line">  <span class="built_in">local</span> result_file=<span class="variable">$1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$line</span> -ne 0 ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">return</span> <span class="variable">$line</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span> &lt; <span class="variable">$result_file</span></span><br><span class="line">  <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例</span></span><br><span class="line"><span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">  <span class="keyword">for</span>((i=0;i&lt;5;i++));<span class="keyword">do</span></span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run_in_asyn <span class="string">"test t1"</span></span><br><span class="line">run_in_asyn <span class="string">"test t2"</span></span><br><span class="line">run_in_asyn <span class="string">"rr"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例 end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line">is_success <span class="variable">$RESULT_FILE</span></span><br><span class="line"><span class="comment"># 通过 $? 获取上一个命令的返回结果，即 is_success 的返回值</span></span><br><span class="line">exit_code=$?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理临时创建的文件</span></span><br><span class="line">rm -rf <span class="variable">$RESULT_FILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出脚本的耗时</span></span><br><span class="line">end_time=$(date +%s)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"run <span class="variable">$0</span> duration: <span class="variable">$((end_time - start_time)</span>)s"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$exit_code</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>E.W.Dijkstra 双栈算术求值</title>
      <link href="/2019/04/25/arithmetic-double-Dijkstra/"/>
      <url>/2019/04/25/arithmetic-double-Dijkstra/</url>
      
        <content type="html"><![CDATA[<p>双栈算术是 E.W.Dijkstra 在 20 世纪 60 年代发明的一个非常简单的算法，通过使用两个栈。<br>一个保存运算操作符，一个保存值的方式，来实现算术运算。思路如下:</p><p>一个算术表达式通常由括号，运算符和数字组成，将表达式从左到右逐一按以下步骤处理:</p><ol><li>如遇到 <code>(</code> 忽略</li><li>遇到数字则压入专门保存数字的栈</li><li>遇到操作符则压入专门保存运算符的栈</li><li>遇到 <code>)</code>, 从保存数字的栈中弹出两个数，然后从保存运算符的栈中弹出一个运算符，运算后将结果压入保存数字的栈</li></ol><hr><p><strong> 以 <code>(1 +（( 2 + 3 ）x （ 4 x 5 )))</code> 为例,如下图 </strong></p><p><img src="/images/E_W_Dijkstra.jpg" alt="E.W.Dijkstra 双栈算术轨迹图"></p><hr><blockquote><p>详情见 算法（第四版）81 页</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux 命令之 sed</title>
      <link href="/2019/04/18/linux-cmd-sed/"/>
      <url>/2019/04/18/linux-cmd-sed/</url>
      
        <content type="html"><![CDATA[<h1 id="sed-命令"><a href="#sed-命令" class="headerlink" title="sed 命令"></a>sed 命令</h1><p><code>sed</code>，<code>awk</code> 和 <code>grep</code> 通常被称为文本处理三剑客。<code>sed</code> 是 Stream Editor（字符流编辑器） 的缩写。</p><p>通常 <code>sed</code> 命令并不会改变原文件，要改变原文件可通过指定 <code>-i</code> 选项，比如 <code>sed -i ...</code></p><p>语法如下：</p><pre><code>$ sed [选项] [sed 内置命令符] [要处理的文件]$ [要处理标准输出] | sed [选项] [sed 内置命令符]</code></pre><p>选项：</p><pre><code>-e    指定脚本来处理文本-f    指定脚本文件来处理文本-n    仅显示处理过的文本-h    显示帮助-V    显示版本</code></pre><p>sed 内置命令符:</p><pre><code>a     新增c     替换d     删除i     插入p     打印s     替换</code></pre><blockquote><p>NOTE: 下面的例子中 example-file 为要处理的文件</p></blockquote><h2 id="搜索并处理"><a href="#搜索并处理" class="headerlink" title="搜索并处理"></a>搜索并处理</h2><p>1.仅对匹配到的行进行处理</p><pre><code>sed &#39;/正则表达式/{处理语句}&#39;如： 将包含有 hello 的行中的 abc 替换为 bcd$sed -e &#39;/hello/{s/abc/bcd/g}&#39;将包含有 hello 的行中的 abc 删除$sed -e &#39;/hello/{s/abc//g}&#39;</code></pre><h2 id="多次编辑"><a href="#多次编辑" class="headerlink" title="多次编辑"></a>多次编辑</h2><p>可通过重复指定 -e 选项，对文本进行多次操作</p><pre><code>如：将 ab 开头的行中的name 替换为 name：haha 并删除以cd开头的行$sed -e &#39;/^ab/{s/name/name: haha/g}&#39; -e &#39;/^cd/d&#39; example-file</code></pre><h2 id="部分替换（s）"><a href="#部分替换（s）" class="headerlink" title="部分替换（s）"></a>部分替换（s）</h2><pre><code>sed &#39;s/要被取代的字串/新的字串/g&#39;  ---&gt; 全局替换sed &#39;s/要被取代的字串/新的字串/&#39;   ---&gt; 只替换每行第一个匹配到的结果如：将文件中的 hello 替换为 hi$sed -e &#39;s/hello/hi/&#39; example-file不加 g 将仅替换每行中的第一个 hello，要将一行中的多个hello替换需在末尾加 g</code></pre><h2 id="插入行（a-i）"><a href="#插入行（a-i）" class="headerlink" title="插入行（a/i）"></a>插入行（a/i）</h2><p>1.在第二行的下方插入内容为 new line 的行</p><pre><code>$sed -e &#39;2a new line&#39; example-file</code></pre><p>2.在第二行上方插入内容为 new line 的行</p><pre><code>$sed -e &#39;2i new line&#39; example-file</code></pre><p>3.在包含 ab 行的上方插入内容为 test test 的新行( sed -e ‘/正则表达式/i 插入的字符’)</p><pre><code>$sed -e &#39;/ab/i test test&#39; example-file</code></pre><h2 id="删除行（d）"><a href="#删除行（d）" class="headerlink" title="删除行（d）"></a>删除行（d）</h2><p>1.删除第二行</p><pre><code>$sed -e 2d example-file</code></pre><p>2.将第一到第三行删除</p><pre><code>$sed -e &#39;1,3d&#39; example-file</code></pre><p>3.将第三行到最后一行删除</p><pre><code>$sed -e &#39;3,$d&#39; example-file</code></pre><p>4.删除匹配 ab 的行( sed -e ‘/正则表达式/d’)</p><pre><code>$sed -e &#39;/ab/d&#39; example-file</code></pre><h2 id="整行或多行替换（c）"><a href="#整行或多行替换（c）" class="headerlink" title="整行或多行替换（c）"></a>整行或多行替换（c）</h2><p>1.将第二行替换为 test test</p><pre><code>$sed -e &#39;2c test test&#39; example-file</code></pre><p>2.将第二行到第三行替换为 test test</p><pre><code>$sed -e &#39;2,3c test test&#39; example-file</code></pre><p>3.将匹配上 ab 的行替换为 test test( sed -e ‘/正则表达式/c  替换后的字符’)</p><pre><code>$sed -e &#39;/ab/c test test&#39; example-file</code></pre><h2 id="仅显示部分行（p）"><a href="#仅显示部分行（p）" class="headerlink" title="仅显示部分行（p）"></a>仅显示部分行（p）</h2><p>1.仅显示第三到第五行</p><pre><code>$sed -n &#39;3,5p&#39; example-file</code></pre><p>2.仅显示匹配 hello 的行</p><pre><code>$sed -n &#39;/hello/p&#39; example-file</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> cmd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>更换 hexo 博客主题</title>
      <link href="/2019/04/18/change-hexo-them-md/"/>
      <url>/2019/04/18/change-hexo-them-md/</url>
      
        <content type="html"><![CDATA[<h1 id="更换-hexo-博客主题"><a href="#更换-hexo-博客主题" class="headerlink" title="更换 hexo 博客主题"></a>更换 hexo 博客主题</h1><p>在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> 可以查到众多的 hexo 主题，我们可以选一款喜欢的主题，然后用到自己的博客上。</p><ol><li><p>首先选择喜欢的主题，然后到他的 github 上将其 clone 到 themes 文件夹的某个文件中</p><p> git clone git@github.com:probberechts/hexo-theme-cactus.git thenes/cactus</p></li><li><p>修改 <code>_config.yml</code></p><p>theme: cactus</p></li><li><p>重启 hexo 即可</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ruby 遇到过的问题集锦</title>
      <link href="/2019/04/17/ruby-issues/"/>
      <url>/2019/04/17/ruby-issues/</url>
      
        <content type="html"><![CDATA[<h1 id="nokogiri-安装问题"><a href="#nokogiri-安装问题" class="headerlink" title="nokogiri  安装问题"></a>nokogiri  安装问题</h1><p><strong>ERROR: cannot discover where libxml2 is located on your system. please make sure <code>pkg-config</code> is installed.</strong></p><p>报错信息：</p><pre><code>current directory: /Users/chenkunhui/.rvm/gems/ruby-2.5.1@toolgems/gems/nokogiri-1.8.4/ext/nokogiri/Users/chenkunhui/.rvm/rubies/ruby-2.5.1/bin/ruby -r ./siteconf20190327-6771-1hthttu.rb extconf.rb --use-system-librarieschecking if the C compiler accepts ... yeschecking if the C compiler accepts -Wno-error=unused-command-line-argument-hard-error-in-future... noBuilding nokogiri using system libraries.Using pkg-config gem version 1.3.7checking for libxml-2.0... yeschecking for libxslt... yeschecking for libexslt... yesERROR: cannot discover where libxml2 is located on your system. please make sure `pkg-config` is installed.*** extconf.rb failed ***Could not create Makefile due to some reason, probably lack of necessarylibraries and/or headers.  Check the mkmf.log file for more details.  You mayneed configuration options....</code></pre><p>系统已经安装了 <code>pkg-config</code> 和 <code>libxml2</code>,  但却报错说找不到 <code>libxml2</code>,<br>解决办法是安装 gem 包时，指定 <code>libxml2</code> 的位置。</p><p>解决方案：</p><blockquote><p>参考： <a href="https://gist.github.com/sobstel/f6a490d854a2e5a214c3f2cd9c366032" target="_blank" rel="noopener">https://gist.github.com/sobstel/f6a490d854a2e5a214c3f2cd9c366032</a></p></blockquote><p>执行以下代码:</p><pre><code>gem install nokogiri -v &#39;1.8.4&#39; -- --with-xml2-include=/usr/local/Cellar/libxml2/2.9.9_2/include/libxml2 --use-system-libraries`</code></pre><p>可以看到一下输出</p><pre><code>Building native extensions with: &#39;--with-xml2-include=/usr/local/Cellar/libxml2/2.9.9_2/include/libxml2 --use-system-libraries&#39;This could take a while...Successfully installed nokogiri-1.8.4Parsing documentation for nokogiri-1.8.4Installing ri documentation for nokogiri-1.8.4Done installing documentation for nokogiri after 12 seconds1 gem installed</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issues </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Hexo中渲染MathJax数学公式</title>
      <link href="/2019/04/17/markdown-MathJax/"/>
      <url>/2019/04/17/markdown-MathJax/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章出处：</p><p>作者：ShallowLearner</p><p>链接：<a href="https://www.jianshu.com/p/7ab21c7f0674" target="_blank" rel="noopener">https://www.jianshu.com/p/7ab21c7f0674</a></p><p>来源：简书</p></blockquote><hr><h1 id="在Hexo中渲染MathJax数学公式"><a href="#在Hexo中渲染MathJax数学公式" class="headerlink" title="在Hexo中渲染MathJax数学公式"></a>在Hexo中渲染MathJax数学公式</h1><p>在用markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成Mathjax，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线’_’代表斜体，会被渲染引擎处理为<em>标签。</em></p><p>因为类Latex格式书写的数学公式下划线 ‘_’ 表示下标，有特殊的含义，如果被强制转换为<em>标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，$x_i$在开始被渲染的时候，处理为$x<em>i</em>$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。<br>类似的语义冲突的符号还包括’*’, ‘{‘, ‘}’, ‘\’等。</em></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的最靠谱的方法。</p><p>更换Hexo的markdown渲染引擎，hexo-renderer-kramed引擎是在默认的渲染引擎hexo-renderer-marked的基础上修改了一些bug，两者比较接近，也比较轻量级。</p><pre><code>npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save</code></pre><p>执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。</p><p>然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为hexo-renderer-kramed引擎也有语义冲突的问题。接下来到博客根目录下，找到node_modules\kramed\lib\rules\inline.js，把第11行的escape变量的值做相应的修改：</p><pre><code>//  escape: /^\\([\\`*{}\[\]()#$+\-.!_&gt;])/,escape: /^\\([`*\[\]()#$+\-.!_&gt;])/</code></pre><p>这一步是在原基础上取消了对\,{,}的转义(escape)。<br>同时把第20行的em变量也要做相应的修改。</p><pre><code>//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</code></pre><p>重新启动hexo（先clean再generate）,问题完美解决。哦，如果不幸还没解决的话，看看是不是还需要在使用的主题中配置mathjax开关。<br>在主题中开启mathjax开关</p><p>如何使用了主题了，别忘了在主题（Theme）中开启mathjax开关，下面以next主题为例，介绍下如何打开mathjax开关。<br>进入到主题目录，找到_config.yml配置问题，把mathjax默认的false修改为true，具体如下：</p><pre><code># MathJax Supportmathjax:  enable: true  per_page: true</code></pre><p>别着急，这样还不够，还需要在文章的Front-matter里打开mathjax开关，如下：</p><pre><code>---title: index.htmldate: 2016-12-28 21:01:30tags:mathjax: true--</code></pre><p>不要嫌麻烦，之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux 命令之 top</title>
      <link href="/2019/04/11/linux_cmd_top/"/>
      <url>/2019/04/11/linux_cmd_top/</url>
      
        <content type="html"><![CDATA[<h1 id="top-简介"><a href="#top-简介" class="headerlink" title="top 简介"></a>top 简介</h1><p>该命令可实时显示系统中各个进程的资源占用情况</p><p><strong>通常显示如下：</strong></p><pre><code>+---------------------------------------------------------------------------------+| top - 21:17:20 up  2:14,  1 users,  load average: 0.52, 0.58, 0.59              || Tasks:   4 total,   1 running,   3 sleeping,   0 stopped,   0 zombie            || %Cpu(s):  8.9 us,  6.9 sy,  0.0 ni, 83.9 id,  0.0 wa,  0.4 hi,  0.0 si,  0.0 st || KiB Mem :  8269472 total,  3354232 free,  4678764 used,   236476 buff/cache     || KiB Swap: 13107196 total, 13090184 free,    17012 used.  3449852 avail Mem      ||                                                                                 ||   PID USER      PR  NI    VIRT    RES   SHR  S  %CPU %MEM    TIME+   COMMAND    ||     1 root      20   0    8304    132   104  S   0.0  0.0   0:00.35    init     ||   ...  ...     ...  ...   ...     ...   ...  .   ...  ...     ...       ...     |+---------------------------------------------------------------------------------+</code></pre><p><strong>其输出说明如下：</strong></p><ul><li><p>第一行：显示任务队列信息，与 uptime 命令的执行结果相同</p><pre><code>21:17:20                         当前系统时间up 2:14                          系统已经运行2小时14分1 users                          当前有 1 个用户登陆系统load average: 0.52, 0.58, 0.59   过去 1 分钟，5 分钟，15 分钟的平均负载情况</code></pre></li><li><p>第二行：进程的统计信息</p><pre><code>4 total                          当前共计 4 个进程1 running                        1 个在运行中3 sleeping                       3 个休眠中0 stopped                        stopped 状态的为 0 个0 zombie                         僵死状态的有 0 个</code></pre></li><li><p>第三行：CPU 的状态信息</p><pre><code>8.9 us                           用户占用 CPU 的百分比6.9 sy                           内核空间占用 CPU 的百分百0.0 ni                           改变过优先级的进程占用 CPU 的百分百83.9 id                          空闲 CPU 百分比0.0 wa                           I/O 等待占用 CPU 的百分百0.4 hi                           硬中断（Hardware IRQ）占用 CPU 的百分百0.0 si                           软中断（Software Interrupts）占用 CPU 的百分比0.0 st                           虚拟内存占用 CPU 的百分百</code></pre></li><li><p>第四行：内存统计信息</p><pre><code>8269472 total                    物理内存总量，单位kb3354232 free                     空闲内存总量，单位kb17012 used                       使用中的内存总量，单位kb236476 buff/cache                缓冲的内存总量</code></pre></li><li><p>第五行：swap 交换分区统计</p><pre><code>13107196 total                   交换区总量，单位kb13090184 free                    空闲交换区空间，单位kb17012 used                       使用的交换区的总量，单位kb3449852 avail Mem                全部可用的内存总量（同 free 命令中的 available），单位kb</code></pre></li><li><p>表格中各字段含义</p><pre><code>PID                              进程 idUSER                             进程所有者PR                               进程优先级NI                               nice 值，负值表示高优先级，正值表示低优先级VIRT                             进程使用的虚拟内存总量，单位为kbRES                              进程使用的、未被换出的物理内存大小，单位为kbSHR                              共享内存大小，单位为kbS                                进程状态，各状态表示如下                                 D： 不可中断的睡眠状态                                 R： 运行                                 S： 睡眠                                 T： 跟踪/停止                                 Z： 僵尸进程%CPU                             上次更新到现在的CPU时间占用百分百%MEM                             进程使用的物理内存百分百TIME+                            进程使用的CPU时间总计，单位1/100秒COMMAND                          进程名称（命令/命令行）</code></pre></li></ul><h1 id="top-交互式命令"><a href="#top-交互式命令" class="headerlink" title="top 交互式命令"></a>top 交互式命令</h1><pre><code>z                    打开或关闭颜色b                    打开或关闭加粗高亮y                    高亮运行的进程，需结合b或z使用x                    高亮显示选中的列，需结合b或z使用&lt;/&gt;                  切换选中列shift + r            切换选中列的排序方式，正向或反向排序l                    切换是否显示平均负载和启动时间信息（即第一行的显示开关）t                    切换CPU状态统计信息的显示方式（可切换为条形图或隐藏）m                    切换显示内存统计信息的显示方式（可切换为条形图或隐藏）u                    显示指定用户相关的进程信息c                    切换是否显示完整的命令行和命令名称信息i                    切换是否显示闲置进程或僵死进程k                    停止一个进程，系统将提示用户输入需要停止进程的PID1                    数字 1，用于多核CPU监控，切换是否显示每个逻辑CPU状况shift + h            将第二行的 Tasks 进程统计信息改为显示 Threads 线程统计信息f                    添加或删除监控列表中的字段，带*的为显示，通过空格键取消显示或添加显示s/d                  改变top的刷新时间shift + w            保存当前top的设置到 ~/.toprc 文件中q                    退出topshift + z            全局颜色设置shift + b            全局字体加粗设置r                    调整一个进程的优先级shift + s            开启或关闭累计模式o                    待描述shift + i            Irix/Solaris 模式h/?                  显示帮助信息，给出交互式命令的一些说明</code></pre><h1 id="top-命令行参数"><a href="#top-命令行参数" class="headerlink" title="top 命令行参数"></a>top 命令行参数</h1><pre><code>$ top [option]-c                     同交互模式中的 c-d [number]            同交互模式中的s或d，指定top的刷新间隔时间-H                     同交互模式中的 shift + h-i                     同交互模式中的 i-n [number]            指定刷新多少次后自动退出-b                     以批处理的模式显示进行信息，输出结果可以传递给其他程序或写入文件中。                       在该模式下，top 命令不会接受任何输入，一直运行直到 -n 选项设置的阀值，                       或者通过 CTRL+C 等组合键结束。-p                     显示指定进程信息</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> cmd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sidekiq 简单使用</title>
      <link href="/2018/12/22/ruby-sidekiq/"/>
      <url>/2018/12/22/ruby-sidekiq/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>将sidekiq添加到Gemfile中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem &apos;sidekiq&apos;, &apos;~&gt; 5.2&apos;, &apos;&gt;= 5.2.3&apos;</span><br></pre></td></tr></table></figure></li><li><p>执行 bundle install</p></li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>sidekiq 将执行任务的各种信息默认保存到 redis 中，所以需要配置redis客户端</p><ol><li>在 <code>config/initializers/sidekiq.rb</code>中加入如下配置，如过不配置，默认使用<code>localhost:6379</code>的redis<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sidekiq.configure_server do |config|</span><br><span class="line">  config.redis = &#123; url: &apos;redis://redis.example.com:7372/0&apos; &#125;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">Sidekiq.configure_client do |config|</span><br><span class="line">  config.redis = &#123; url: &apos;redis://redis.example.com:7372/0&apos; &#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>更多信息可参考 <a href="https://github.com/mperham/sidekiq/wiki/Using-Redis" target="_blank" rel="noopener">https://github.com/mperham/sidekiq/wiki/Using-Redis</a></p></blockquote><h1 id="编写后台任务"><a href="#编写后台任务" class="headerlink" title="编写后台任务"></a>编写后台任务</h1><p>所有后台任务都写在<code>app/workers</code>文件夹下，可手动创建，也可以通过以下命令创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g sidekiq:worker &lt;name&gt;</span><br></pre></td></tr></table></figure></p><p>创建好的任务文件格式如下<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HardWorker</span></span></span><br><span class="line">  <span class="keyword">include</span> Sidekiq::Worker</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">perform</span><span class="params">(name, count)</span></span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h1 id="执行后台任务"><a href="#执行后台任务" class="headerlink" title="执行后台任务"></a>执行后台任务</h1><ol><li><p>在需要执行的地方像如下代码调用即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异步运行</span></span><br><span class="line">HardWorker.perform_async(<span class="string">'bob'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 5 分钟后运行</span></span><br><span class="line">HardWorker.perform_in(<span class="number">5</span>.minutes, <span class="string">'bob'</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>启动sidekiq进行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle exec sidekiq</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>sidekiq 和 raile 以及 redis 都要启动，仅启动其中一个是无法执行后台任务的</p></blockquote><h1 id="sidekiq-配置文件"><a href="#sidekiq-配置文件" class="headerlink" title="sidekiq 配置文件"></a>sidekiq 配置文件</h1><p>默认sidekiq 读取<code>config/sidekiq.yaml</code>这个配置文件，如果配置文件不是这个可在启动<code>sidekiq</code>时通过<code>-C</code>指定配置文件，像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle exec sidekiq -C config/myapp_sidekiq.yml</span><br></pre></td></tr></table></figure></p><p>配置文件也可以没有，这个不会影响任务的执行，但如果想要定制sidekiq的一些行为，就需要配置了</p><blockquote><p>配置详细信息可参考 <a href="https://github.com/mperham/sidekiq/wiki/Advanced-Options" target="_blank" rel="noopener">https://github.com/mperham/sidekiq/wiki/Advanced-Options</a></p></blockquote><h1 id="sidekiq-web-ui-界面"><a href="#sidekiq-web-ui-界面" class="headerlink" title="sidekiq web ui 界面"></a>sidekiq web ui 界面</h1><p>sidekiq 自带一个web 管理界面，可通过下面方式开启</p><ol><li><p>在<code>config/routes.rb</code> 中加入如下内容</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'sidekiq/web'</span></span><br><span class="line"> mount Sidekiq::Web =&gt; <span class="string">'/sidekiq'</span></span><br></pre></td></tr></table></figure></li><li><p>访问<code>http://localhost:port/sidekiq</code> 即可</p></li></ol><blockquote><p>更多细节可参考 <a href="https://github.com/mperham/sidekiq/wiki" target="_blank" rel="noopener">https://github.com/mperham/sidekiq/wiki</a></p></blockquote><h1 id="sidekiq-定时任务"><a href="#sidekiq-定时任务" class="headerlink" title="sidekiq 定时任务"></a>sidekiq 定时任务</h1><p>在上面的基础上继续做如下事情</p><ol><li><p>添加一个gem包到Gemfile中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem &apos;sidekiq-cron&apos;, &apos;~&gt; 1.0&apos;, &apos;&gt;= 1.0.4&apos;</span><br></pre></td></tr></table></figure></li><li><p>编写worker任务，跟sidekiq是一样的</p></li><li><p>通过下面的任一方法，将定时任务添加到sidekiq中</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">job = Sidekiq::Cron::Job.create(<span class="symbol">name:</span> <span class="string">'Hard worker - every 5min'</span>, <span class="symbol">cron:</span> <span class="string">'*/5 * * * *'</span>, <span class="class"><span class="keyword">class</span>: '<span class="title">HardWorker</span>')</span></span><br><span class="line">job.save</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hash = &#123;</span><br><span class="line">  <span class="string">'name_of_job'</span> =&gt; &#123;</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'MyClass'</span>,</span><br><span class="line">    <span class="string">'cron'</span>  =&gt; <span class="string">'1 * * * *'</span>,</span><br><span class="line">    <span class="string">'args'</span>  =&gt; <span class="string">'(OPTIONAL) [Array or Hash]'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'My super iber cool job'</span> =&gt; &#123;</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'SecondClass'</span>,</span><br><span class="line">    <span class="string">'cron'</span>  =&gt; <span class="string">'*/5 * * * *'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sidekiq::Cron::Job.load_from_hash hash</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">array = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">'name'</span>  =&gt; <span class="string">'name_of_job'</span>,</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'MyClass'</span>,</span><br><span class="line">    <span class="string">'cron'</span>  =&gt; <span class="string">'1 * * * *'</span>,</span><br><span class="line">    <span class="string">'args'</span>  =&gt; <span class="string">'(OPTIONAL) [Array or Hash]'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">'name'</span>  =&gt; <span class="string">'Cool Job for Second Class'</span>,</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'SecondClass'</span>,</span><br><span class="line">    <span class="string">'cron'</span>  =&gt; <span class="string">'*/5 * * * *'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Sidekiq::Cron::Job.load_from_array array</span><br></pre></td></tr></table></figure><blockquote><p>相同的任务多次创建时，只会创建一个</p><p>更多信息可参考 <a href="https://github.com/ondrejbartas/sidekiq-cron" target="_blank" rel="noopener">https://github.com/ondrejbartas/sidekiq-cron</a></p></blockquote><ol><li>开启 web ui 界面</li></ol><p>在<code>config/routes.rb</code> 中加入如下内容<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'sidekiq/web'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sidekiq/cron/web'</span></span><br><span class="line"> mount Sidekiq::Web =&gt; <span class="string">'/sidekiq'</span></span><br></pre></td></tr></table></figure></p><p>同样访问<code>http://localhost:port/sidekiq</code> 即可</p>]]></content>
      
      
      <categories>
          
          <category> ruby </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ruby 简单发邮件脚本</title>
      <link href="/2018/11/28/ruby-send-email-md/"/>
      <url>/2018/11/28/ruby-send-email-md/</url>
      
        <content type="html"><![CDATA[<h1 id="通过-‘net-smtp’-标准库发送email"><a href="#通过-‘net-smtp’-标准库发送email" class="headerlink" title="通过 ‘net/smtp’ 标准库发送email"></a>通过 ‘net/smtp’ 标准库发送email</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'net/smtp'</span></span><br><span class="line"></span><br><span class="line">message = <span class="string">&lt;&lt;MESSAGE_END</span></span><br><span class="line"><span class="string">From: Private Person &lt;chen_kunhui@163.com&gt;</span></span><br><span class="line"><span class="string">To: A Test User &lt;c.k.h@foxmail.com&gt;</span></span><br><span class="line"><span class="string">MIME-Version: 1.0</span></span><br><span class="line"><span class="string">Content-type: text/html</span></span><br><span class="line"><span class="string">Subject: SMTP e-mail test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;b&gt;This is HTML message.&lt;/b&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;This is headline.&lt;/h1&gt;</span></span><br><span class="line"><span class="string">MESSAGE_END</span></span><br><span class="line"></span><br><span class="line">Net::SMTP.start(<span class="string">'smtp.163.com'</span>, <span class="number">25</span>, <span class="string">'163.com'</span>, <span class="string">'chen_kunhui'</span>, <span class="string">'*****'</span>,<span class="symbol">:plain</span>) <span class="keyword">do</span> <span class="params">|smtp|</span></span><br><span class="line">  smtp.send_message message, <span class="string">'chen_kunhui@163.com'</span>,</span><br><span class="line">                             <span class="string">'c.k.h@foxmail.com'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>主要 message 的格式，一个电子邮件要要From，To和Subject，文本内容与头部信息间需要一个空行</p></blockquote><h1 id="通过-第三方-gem-包的方式"><a href="#通过-第三方-gem-包的方式" class="headerlink" title="通过 第三方 gem 包的方式"></a>通过 第三方 gem 包的方式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install mail</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'mail'</span></span><br><span class="line"></span><br><span class="line">smtp = &#123; <span class="symbol">:address</span> =&gt; <span class="string">'smtp.163.com'</span>, <span class="symbol">:port</span> =&gt; <span class="number">25</span>, <span class="symbol">:domain</span> =&gt; <span class="string">'163.com'</span>, <span class="symbol">:user_name</span> =&gt; <span class="string">'chen_kunhui'</span>, <span class="symbol">:password</span> =&gt; <span class="string">'***'</span>, <span class="symbol">:enable_starttls_auto</span> =&gt; <span class="literal">true</span>, <span class="symbol">:openssl_verify_mode</span> =&gt; <span class="string">'none'</span> &#125;</span><br><span class="line">Mail.defaults &#123; delivery_method <span class="symbol">:smtp</span>, smtp &#125;</span><br><span class="line">mail = Mail.new <span class="keyword">do</span></span><br><span class="line">  from <span class="string">'chen_kunhui@163.com'</span></span><br><span class="line">  to <span class="string">'c.k.h@foxmail.com'</span></span><br><span class="line">  subject <span class="string">'test'</span></span><br><span class="line">  content_type <span class="string">'text/html'</span></span><br><span class="line">  body <span class="string">"&lt;h1&gt;hahaha&lt;/h1&gt;"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">mail.deliver!</span><br></pre></td></tr></table></figure><h1 id="通过单独使用-rails-的-action-mailer-组件的方式"><a href="#通过单独使用-rails-的-action-mailer-组件的方式" class="headerlink" title="通过单独使用 rails 的 action mailer 组件的方式"></a>通过单独使用 rails 的 action mailer 组件的方式</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'action_mailer'</span></span><br><span class="line"></span><br><span class="line">ActionMailer::Base.smtp_settings = &#123;</span><br><span class="line">  <span class="symbol">address:</span>        <span class="string">'smtp.163.com'</span>,        <span class="comment"># default: localhost</span></span><br><span class="line">  <span class="symbol">port:</span>           <span class="string">'25'</span>,                  <span class="comment"># default: 25</span></span><br><span class="line">  <span class="symbol">user_name:</span>      <span class="string">'chen_kunhui'</span>,</span><br><span class="line">  <span class="symbol">password:</span>       <span class="string">'***'</span>,</span><br><span class="line">  <span class="symbol">authentication:</span> <span class="symbol">:plain</span>                 <span class="comment"># :plain, :login or :cram_md5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notifier</span> &lt; ActionMailer::Base</span></span><br><span class="line">  default <span class="symbol">from:</span> <span class="string">'chen_kunhui@163.com'</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">welcome_email</span><span class="params">(recipient, email_body)</span></span></span><br><span class="line">    mail(<span class="symbol">to:</span> recipient,</span><br><span class="line">         <span class="symbol">body:</span> email_body,</span><br><span class="line">         <span class="symbol">content_type:</span> <span class="string">"text/html"</span>,</span><br><span class="line">         <span class="symbol">subject:</span> <span class="string">"Already rendered!"</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">msg = Notifier.welcome_email(<span class="string">'c.k.h@foxmail.com'</span>, <span class="string">"&lt;h1&gt; hello!&lt;/h1&gt;"</span>)</span><br><span class="line">msg.deliver_now</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://www.runoob.com/ruby/ruby-sending-email.html" target="_blank" rel="noopener">http://www.runoob.com/ruby/ruby-sending-email.html</a></p><p><a href="https://github.com/mikel/mail/" target="_blank" rel="noopener">https://github.com/mikel/mail/</a></p><p><a href="https://github.com/rails/rails/tree/v5.2.1.1/actionmailer" target="_blank" rel="noopener">https://github.com/rails/rails/tree/v5.2.1.1/actionmailer</a></p><p><a href="https://ruby-china.github.io/rails-guides/action_mailer_basics.html" target="_blank" rel="noopener">https://ruby-china.github.io/rails-guides/action_mailer_basics.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ruby </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>不依赖框架情况下使用 ORM</title>
      <link href="/2018/11/23/ruby-rails-active-record-md/"/>
      <url>/2018/11/23/ruby-rails-active-record-md/</url>
      
        <content type="html"><![CDATA[<h1 id="ActiveRecord"><a href="#ActiveRecord" class="headerlink" title="ActiveRecord"></a>ActiveRecord</h1><p>ActiveRecord 是一个 orm 框架，它是rails的一部分，但我们也可以在rails 以外单独使用</p><ol><li><p>安装依赖的gem包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bundle install activerecord</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bundle install mysql2</span></span><br></pre></td></tr></table></figure></li><li><p>示例脚本</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'active_record'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'mysql2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要提前创建好数据库</span></span><br><span class="line">ActiveRecord::Base.establish_connection(</span><br><span class="line"><span class="symbol">:adapter</span> =&gt; <span class="string">"mysql2"</span>,</span><br><span class="line"><span class="symbol">:username</span> =&gt; <span class="string">"root"</span>,</span><br><span class="line"><span class="symbol">:host</span> =&gt; <span class="string">"localhost"</span>,</span><br><span class="line"><span class="symbol">:password</span> =&gt; <span class="string">"root"</span>,</span><br><span class="line"><span class="symbol">:database</span> =&gt; <span class="string">"testdb"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ActiveRecord::Migration[4.2] 中的[4.2]是必须的，表示rails的版本</span></span><br><span class="line"><span class="comment"># 虽然我们没有使用rails 但这里还是需要指定，可以是其他版本也可以，否则会报错</span></span><br><span class="line"><span class="comment"># Directly inheriting from ActiveRecord::Migration is not supported.</span></span><br><span class="line"><span class="comment"># Please specify the Rails release the migration was written for: (StandardError)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateUsers</span> &lt; ActiveRecord::Migration[4.2]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:labels</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.string <span class="symbol">:name</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行数据迁移创建users表</span></span><br><span class="line">CreateUsers.new.change</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">User.create <span class="symbol">name:</span> <span class="string">'test'</span></span><br><span class="line">p User.find <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p><a href="https://ruby-china.org/topics/29816" target="_blank" rel="noopener">https://ruby-china.org/topics/29816</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ruby </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在简单的 ruby 应用中使用 Gemfile</title>
      <link href="/2018/11/23/ruby-bundle-note-md/"/>
      <url>/2018/11/23/ruby-bundle-note-md/</url>
      
        <content type="html"><![CDATA[<h1 id="在简单的-ruby-应用中使用-Gemfile"><a href="#在简单的-ruby-应用中使用-Gemfile" class="headerlink" title="在简单的 ruby 应用中使用 Gemfile"></a>在简单的 ruby 应用中使用 Gemfile</h1><p>在写一些稍复杂的脚本时，如果想使用一些 gem 包，但又不想将gem安装到系统目录中，该怎么做呢？下面将讲述如何在不使用任何框架的情况下，如何使用 bundle 来管理 gem 包。</p><ol><li><p>创建一个文件，用来存放你的脚本及相关依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir script</span></span><br></pre></td></tr></table></figure></li><li><p>执行下面命令，初始化 Gemfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bundle init</span></span><br></pre></td></tr></table></figure></li><li><p>接下来，你就可以在 Gemfile 中像其他应用一样，引入你的依赖 gem</p></li><li><p>执行以下命令， 将 gem 安装到当前文件夹下的 <code>vendor/bundle</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">bundle install --path=./vendor/bundle</span></span><br></pre></td></tr></table></figure></li><li><p>在你脚本的中加入以下代码，即可使用 Gemfile 中的依赖 gem</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">ENV[<span class="string">'BUNDLE_GEMFILE'</span>] <span class="params">||</span>= File.expand_path(<span class="string">'../Gemfile'</span>, __FILE_<span class="number">_</span>)</span><br><span class="line"><span class="keyword">require</span> <span class="string">'bundler/setup'</span></span><br><span class="line">Bundler.<span class="keyword">require</span>(<span class="symbol">:default</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来就可以写你的应用代码了</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>这时直接使用依赖的 gem 就可以了，不需在使用前 require 了，<code>Bundler.require(:default)</code> 已经将 gem 引入了<br><code>Bundler.require(:default)</code>引入的是没有在group中的gem<br><code>Bundler.require(:test)</code> 表示仅引入名为test group中的gem<br><code>Bundler.require(:default,:test)</code> 表示引入没有group中的gem和test group中的gem</p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>有时候我写有多个 ruby 文件，在使用时需要一个一个地require，文件很多的时候通常很繁琐，我们可以通过一些方式，批量引入，例如批量引入当前文件夹下 lib 文件下的所有 ruby 文件。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dir[ File.expand_path(<span class="string">'../dsl/search/queries/**/*.rb'</span>, __FILE_<span class="number">_</span>) ].each        &#123; <span class="params">|f|</span> <span class="keyword">require</span> f &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>需要留意的是，如果lib文件夹的ruby文件又相互require，那么必须要确保被requrie的文件要提前引入</p></blockquote><h1 id="其他参考资料"><a href="#其他参考资料" class="headerlink" title="其他参考资料"></a>其他参考资料</h1><blockquote><p><a href="https://ruby-china.org/topics/26655" target="_blank" rel="noopener">https://ruby-china.org/topics/26655</a></p><p><a href="https://ruby-china.org/topics/25530" target="_blank" rel="noopener">https://ruby-china.org/topics/25530</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> bundle </tag>
            
            <tag> Gemfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql 之 case when 用法</title>
      <link href="/2018/11/13/db-mysql-sql-note-md/"/>
      <url>/2018/11/13/db-mysql-sql-note-md/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>sql中的case和when可以嵌套到sql语句中，达到多重选择，按条件求和，值映射等效果。</p><p>通常写法为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case &lt;列名&gt;</span><br><span class="line">when &lt;值&gt; then &lt;满足条件要显示的值&gt;</span><br><span class="line">when &lt;值&gt; then &lt;满足条件要显示的值&gt;</span><br><span class="line">else &apos;都不满足时要显示的值&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case</span><br><span class="line">when 列名 &gt; 10 then &lt;当列中的值大于10时要显示的值&gt;</span><br><span class="line">when 列名 &gt; 20 then &lt;当列中的值大于20时要显示的值&gt;</span><br><span class="line">else &apos;都不满足时要显示的值&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>比如有一张 scores 表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from scores;</span><br><span class="line">+----+---------+------+</span><br><span class="line">| id | name    | score|</span><br><span class="line">+----+---------+------+</span><br><span class="line">|  1 | zhansan |   22 |</span><br><span class="line">|  2 | zhansan |   40 |</span><br><span class="line">|  3 | zhansan |   33 |</span><br><span class="line">|  4 | zhansan |   55 |</span><br><span class="line">|  5 | lisi    |   44 |</span><br><span class="line">|  6 | lisi    |   50 |</span><br><span class="line">|  7 | lisi    |   30 |</span><br><span class="line">|  8 | lisi    |   40 |</span><br><span class="line">+----+---------+------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><ol><li><p>按 name 分类，求 score 大于30的有几条，大于40的有几条。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,sum(case  when score &gt; 30 then 1 else 0 end)gt30,sum(case  when score &gt; 40 then 1 else 0 end)gt40 from scores group by name;</span><br><span class="line">+---------+------+------+</span><br><span class="line">| name    | gt30 | gt40 |</span><br><span class="line">+---------+------+------+</span><br><span class="line">| lisi    |    3 |    2 |</span><br><span class="line">| zhansan |    3 |    1 |</span><br><span class="line">+---------+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li><p>在查询结果中新加一列，将score为40的显示为四十，非40的显示为其他</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,score,(case scores.core when 40 then &apos;四十&apos; else &apos;其他&apos; end)备注 from scores;</span><br><span class="line">+---------+------+--------+</span><br><span class="line">| name    | score| 备注   |</span><br><span class="line">+---------+------+--------+</span><br><span class="line">| zhansan |   22 | 其他   |</span><br><span class="line">| zhansan |   40 | 四十   |</span><br><span class="line">| zhansan |   33 | 其他   |</span><br><span class="line">| zhansan |   55 | 其他   |</span><br><span class="line">| lisi    |   44 | 其他   |</span><br><span class="line">| lisi    |   50 | 其他   |</span><br><span class="line">| lisi    |   30 | 其他   |</span><br><span class="line">| lisi    |   40 | 四十   |</span><br><span class="line">+---------+------+--------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb</title>
      <link href="/2018/10/17/db-influxdb/"/>
      <url>/2018/10/17/db-influxdb/</url>
      
        <content type="html"><![CDATA[<h1 id="influxdb"><a href="#influxdb" class="headerlink" title="influxdb"></a>influxdb</h1><p><a href="https://docs.influxdata.com/influxdb/v1.3/" target="_blank" rel="noopener">InfluxDB</a>是一个开源的时序数据库，使用GO语言开发，特别适合用于处理和分析资源监控数据这种时序相关数据。</p><blockquote><p>influxdb 文档： <a href="https://docs.influxdata.com/influxdb/v1.6/introduction/" target="_blank" rel="noopener">https://docs.influxdata.com/influxdb/v1.6/introduction/</a></p></blockquote><h2 id="名词及相关概念"><a href="#名词及相关概念" class="headerlink" title="名词及相关概念"></a>名词及相关概念</h2><blockquote><p>官方关键概念解释： <a href="https://docs.influxdata.com/influxdb/v1.6/concepts/key_concepts/" target="_blank" rel="noopener">https://docs.influxdata.com/influxdb/v1.6/concepts/key_concepts/</a><br>官方术语解释：<a href="https://docs.influxdata.com/influxdb/v1.6/introduction/" target="_blank" rel="noopener">https://docs.influxdata.com/influxdb/v1.6/introduction/</a></p></blockquote><h3 id="database"><a href="#database" class="headerlink" title="database"></a>database</h3><p>表示数据库</p><h3 id="measurement"><a href="#measurement" class="headerlink" title="measurement"></a>measurement</h3><p>influxdb 中没有表的概念，将表称为 measurement ，所以influxdb中没有创建表的语法，通常通过直接写入数据对应的 measurement 也就生成了</p><h3 id="points"><a href="#points" class="headerlink" title="points"></a>points</h3><p>在 influxdb 中，将一行数据成为points</p><h3 id="series"><a href="#series" class="headerlink" title="series"></a>series</h3><p>所有在数据库中的数据，都需要通过图表来展示，而这个series表示这个表里面的数据，可以在图表上画成几条线：通过tags排列组合算出来。具体可以通过SHOW SERIES FROM “表名” 进行查询。</p><h3 id="数据构成"><a href="#数据构成" class="headerlink" title="数据构成"></a>数据构成</h3><p>points 由时间（time），数据（fields），标签（tags）组成</p><ul><li>time ： 每条数据记录时间，是数据库中的主索引（会自动生成）</li><li>fields ： 各种记录的值（没有索引属性），比如 温度，湿度</li><li>tags： 各种有索引的属性，比如 地区，海拔</li></ul><h3 id="保存策略"><a href="#保存策略" class="headerlink" title="保存策略"></a>保存策略</h3><p>用来规定数据在数据库中保存多久，每个库中都会有一个默认的保存策略，当插入数据没有制定保存策略时，就使用默认的保存策略，通常使用方式为<code>保存策略.表名</code>，<strong>指定了什么保存策略存储数据，取的时候也要通过指定对应的保存策略取数据</strong>，否则取不到数据</p><h3 id="连续查询"><a href="#连续查询" class="headerlink" title="连续查询"></a>连续查询</h3><p>通常与保存策略一起使用以降低InfluxDB的系统占用量。它是在数据库中按你指定的时间间隔，每隔一段时间执行一次的一条sql语句，通常做法是从某张 measurement 中取想要的数据，插入到另外一张 measurement 中。</p><h2 id="安装启动与卸载"><a href="#安装启动与卸载" class="headerlink" title="安装启动与卸载"></a>安装启动与卸载</h2><blockquote><p>官方指导文档： <a href="https://docs.influxdata.com/influxdb/v1.3/introduction/installation/" target="_blank" rel="noopener">https://docs.influxdata.com/influxdb/v1.3/introduction/installation/</a></p><p><em>以下记录 Ubuntu &amp; Debian 的源码安装过程，其他系统可参考官方文档</em></p></blockquote><h3 id="通过下载-tar-gz-的方式"><a href="#通过下载-tar-gz-的方式" class="headerlink" title="通过下载.tar.gz 的方式"></a>通过下载<code>.tar.gz</code> 的方式</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>只需要下载并解压<a href="https://portal.influxdata.com/downloads#influxdb" target="_blank" rel="noopener">源码包</a>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.influxdata.com/influxdb/releases/influxdb-1.6.3_linux_amd64.tar.gz</span><br><span class="line">tar -xzvf influxdb-1.6.3_linux_amd64.tar.gz &amp;&amp; cd influxdb-1.6.3-1</span><br></pre></td></tr></table></figure></p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>启动脚本在解压目录的<code>usr/bin</code>文件夹下<code>influxd</code>为服务端，<code>influx</code>为客户端，需要将服务段启动起来后才能才作数据库。</p><p><strong>tips:</strong> </p><ul><li><code>influx_inspect</code> 为 influxdb 的查看工具</li><li><code>influx_stress</code> 为 influxdb 的压力测试工具</li><li><code>influx_tsm</code> 为 influxdb 的数据库转换工具</li><li>解压目录下的 <code>etc/influxdb/influxdb.conf</code>文件并没有被使用，可通过在解压目录下运行<code>./usr/bin/influxd config</code> 查看默认的配置信息</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在解压目录下运行启动服务进程</span></span><br><span class="line">./usr/bin/influxd</span><br><span class="line"><span class="comment"># 在解压目录下运行进入到influxdb</span></span><br><span class="line">./usr/bin/influx</span><br></pre></td></tr></table></figure><h5 id="数据存储位置"><a href="#数据存储位置" class="headerlink" title="数据存储位置"></a>数据存储位置</h5><p>启动后，influxdb 会在用户的根目录（～/）下，生成 <code>.influxdb</code> 文件夹和 <code>.influx_history</code> 文件</p><ul><li><code>.influxdb</code> 主要用于存放数据，包括<code>data</code> <code>meta</code> <code>mal</code> 三个文件夹<ul><li><code>data</code> : 存放最终存储的数据</li><li><code>meta</code> : 存放数据库元数据</li><li><code>mal</code> ： 存放预写日志文件</li></ul></li><li><code>.influx_history</code> : 记录 influxdb 的操作记录</li></ul><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>删除解压的文件夹以及<code>~/.influxdb</code> 和 <code>~/.influx_history</code> 文件</p><h3 id="通过-deb-的方式"><a href="#通过-deb-的方式" class="headerlink" title="通过 .deb 的方式"></a>通过 .deb 的方式</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>下载并使用 <code>sudo dpkg -i</code> 命令安装即可<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 deb 包</span></span><br><span class="line">wget https://dl.influxdata.com/influxdb/releases/influxdb_1.6.3_amd64.deb</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo dpkg -i influxdb_1.6.3_amd64.deb</span><br></pre></td></tr></table></figure></p><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><p>安装好后，influxdb 会在 <code>/usr/bin</code>目录下安装好<code>influxd</code> <code>influx</code> <code>influx_inspect</code> <code>influx_stress</code> <code>influx_tsm</code>命令</p><p>和上面一样通过运行对应的命令做对应的事情即可，不同的是这样的安装是系统级的安装，还可以通过下面的命名管理influxdb<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台启动influxdb</span></span><br><span class="line">sudo service influxdb start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo service influxdb restart</span><br><span class="line"><span class="comment"># 查看 influxdb 运行状态</span></span><br><span class="line">sudo service influxdb status</span><br><span class="line"><span class="comment"># 停止 influxdb 进程</span></span><br><span class="line">sudo service influxdb stop</span><br><span class="line"><span class="comment"># 进入到influxdb</span></span><br><span class="line">influx</span><br></pre></td></tr></table></figure></p><p><strong>tips:</strong> </p><ul><li>默认使用的配置文件为 <code>/etc/influxdb/influxdb.conf</code></li><li>数据保存在 <code>/var/lib/influxdb</code> 下</li><li><code>/etc/default/influxdb</code> 可用于配置启动时命令行参数</li></ul><h4 id="卸载-1"><a href="#卸载-1" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --purge influxdb</span><br><span class="line">sudo rm -rf /var/lib/influxdb/</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>下文的操作皆在 influxdb 客户端中进行,请运行<code>influx</code>命令进入客户端</p></blockquote><h3 id="数据库的增加删除"><a href="#数据库的增加删除" class="headerlink" title="数据库的增加删除"></a>数据库的增加删除</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">CREATE DATABASE mydb</span><br><span class="line"><span class="comment"># 显示所有数据库</span></span><br><span class="line">SHOW DATABASE</span><br><span class="line"><span class="comment"># 使用数据库</span></span><br><span class="line">USE mydb</span><br><span class="line"><span class="comment"># 删除数据库</span></span><br><span class="line">DROP DATABASE mydb</span><br></pre></td></tr></table></figure><h3 id="表、数据的增加删除"><a href="#表、数据的增加删除" class="headerlink" title="表、数据的增加删除"></a>表、数据的增加删除</h3><blockquote><p>在做以下操作前请先使用 <code>USE</code> 命令使用某个数据库</p></blockquote><p>influxdb 中没有特定创建表的语法，通过插入一条数据即可生成对应的表和数据，通过使用 Line Protocol 格式书写插入数据的格式。</p><blockquote><p>Line Protocal 资料: <a href="https://docs.influxdata.com/influxdb/v1.6/write_protocols/line_protocol_reference/#syntax" target="_blank" rel="noopener">https://docs.influxdata.com/influxdb/v1.6/write_protocols/line_protocol_reference/#syntax</a></p></blockquote><p>创建数据的语法通常为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT &lt;measurement&gt;[,&lt;tag-key&gt;=&lt;tag-value&gt;...] &lt;field-key&gt;=&lt;field-value&gt;[,&lt;field2-key&gt;=&lt;field2-value&gt;...] [unix-nano-timestamp]</span><br></pre></td></tr></table></figure></p><p>第一值为表明接着逗号，逗号之后是<strong>tag</strong>由多个以逗号隔开<code>key=value</code>形式组成(<em>这里的key和value都必须为string</em>)，接着是一个空格，空格之后是<strong>field</strong>也是由多个<code>key=value</code>形式组成（<em>这里的key必须为string，value可以是string，floats，int或booleans</em>），接着又是一个空格，空格后为时间用于替换调自动生成的时间戳，不指定则自动生成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一张名为 cpu的表 , 包含 host 和 region 两个 tag，和一个value的field</span></span><br><span class="line">INSERT cpu,host=serverA,region=us_west value=0.64</span><br><span class="line"><span class="comment"># 插入数据并指定数据记录时间</span></span><br><span class="line">INSERT cpu,host=serverB,region=us_west value=0.99 1539788361141849675</span><br><span class="line"><span class="comment"># 显示所有 表</span></span><br><span class="line">SHOW MEASUREMENTS</span><br><span class="line"><span class="comment"># 删除一张表</span></span><br><span class="line">DROP MEASUREMENTS cpu</span><br></pre></td></tr></table></figure><p><strong>数据查询语法与mysql一样</strong></p><blockquote><p>查询语法指导：<a href="https://docs.influxdata.com/influxdb/v1.6/concepts/crosswalk/" target="_blank" rel="noopener">https://docs.influxdata.com/influxdb/v1.6/concepts/crosswalk/</a></p></blockquote><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有用户</span></span><br><span class="line">SHOW USERS</span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">CREATE USER <span class="string">"username"</span> WITH PASSWORD <span class="string">'password'</span></span><br><span class="line"><span class="comment"># 创建管理员用户</span></span><br><span class="line">CREATE USER <span class="string">"username"</span> WITH PASSWORD <span class="string">'password'</span> WITH ALL PRIVILEGES</span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">drop user <span class="string">'username'</span></span><br></pre></td></tr></table></figure><p>influxdb 的用户权限分为<code>READ</code>,<code>WRITE</code>,<code>ALL PRIVILEGES</code>三种权限，可通过<code>CREATE USER &quot;username&quot; WITH PASSWORD &#39;password&#39; WITH ALL PRIVILEGES</code>的方式在创建用户时，指定权限，</p><p>默认influxdb并没有开启认证，通过修改配置文件开启权限验证。将<code>auth-enabled = true</code>,然后通过<code>influx  -host ‘localhost‘ -port ‘8086‘ -username &#39;username&#39; -password &#39;password&#39;</code> 的方式登陆</p><h3 id="保存策略的使用"><a href="#保存策略的使用" class="headerlink" title="保存策略的使用"></a>保存策略的使用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看现有的保存策略</span></span><br><span class="line">SHOW RETENTION POLICIES ON mydb</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建保存策略</span></span><br><span class="line">CREATE RETENTION POLICY <span class="string">"2_hours"</span> ON <span class="string">"mydb"</span> DURATION 2h REPLICATION 1</span><br><span class="line"><span class="comment"># 创建一个保存策略并设为默认</span></span><br><span class="line">CREATE RETENTION POLICY <span class="string">"3_hours"</span> ON <span class="string">"mydb"</span> DURATION 3h REPLICATION 1 DEFAULT</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改保存策略为默认保存策略</span></span><br><span class="line">ALTER RETENTION POLICY <span class="string">"2_hours"</span> on <span class="string">"mydb"</span> DEFAULT</span><br><span class="line"><span class="comment"># 修改保存策略的时间</span></span><br><span class="line">ALTER RETENTION POLICY <span class="string">"2_hours"</span> on <span class="string">"mydb"</span> DURATION 4h</span><br><span class="line"><span class="comment"># 修改保存策略的时间并设为默认</span></span><br><span class="line">ALTER RETENTION POLICY <span class="string">"2_hours"</span> on <span class="string">"mydb"</span> DURATION 2h DEFAULT</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除保存策略</span></span><br><span class="line">DROP RETENTION POLICY <span class="string">"2_hours"</span> ON <span class="string">"mydb"</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询时使用保存策略</span></span><br><span class="line">SELECT * FROM <span class="string">"2_hours"</span>.cpu</span><br></pre></td></tr></table></figure><h3 id="连续查询的使用"><a href="#连续查询的使用" class="headerlink" title="连续查询的使用"></a>连续查询的使用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CONTINUOUS QUERIES</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</span><br><span class="line">[RESAMPLE [EVERY &lt;interval&gt;] [FOR &lt;interval&gt;]]</span><br><span class="line">BEGIN SELECT &lt;<span class="keyword">function</span>&gt;(&lt;stuff&gt;)[,&lt;<span class="keyword">function</span>&gt;(&lt;stuff&gt;)] INTO &lt;different_measurement&gt;</span><br><span class="line">FROM &lt;current_measurement&gt; [WHERE &lt;stuff&gt;] GROUP BY time(&lt;interval&gt;)[,&lt;stuff&gt;]</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>查询部分被 CREATE CONTINUOUS QUERY […] BEGIN 和 END 所包含，主要的逻辑代码也是在这一部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY sidekiq_gc_counts ON $DATABASE</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT sum(count) AS total,</span><br><span class="line">        sum(minor_gc_count) AS minor,</span><br><span class="line">        sum(major_gc_count) AS major</span><br><span class="line">    INTO downsampled.sidekiq_gc_counts</span><br><span class="line">    FROM &quot;$DEFAULT_RETENTION_POLICY&quot;.sidekiq_gc_statistics</span><br><span class="line">    GROUP BY time(1m)</span><br><span class="line">END</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 中输出带有颜色字体</title>
      <link href="/2018/10/11/linux-output-colour-word/"/>
      <url>/2018/10/11/linux-output-colour-word/</url>
      
        <content type="html"><![CDATA[<h1 id="linux-中输出带有颜色字体"><a href="#linux-中输出带有颜色字体" class="headerlink" title="linux 中输出带有颜色字体"></a>linux 中输出带有颜色字体</h1><p>Linux系统改变字体颜色，就是用“ANSI非常规字符序列”来生成，输出带颜色的字体可通过将字符串包裹在 <code>\e[32m xxxx \e[0m</code>中实现，如：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">"\e[32m this is green \e[0m"</span></span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[32m this is green \e[0m"</span></span><br></pre></td></tr></table></figure></p><p><strong>tips：</strong> <code>\e</code>写成<code>\033</code>也是可以的，如果要多种方式结合，数字间用分号隔开即可（建议最多3个），如<code>\e[47;5;4;32m eee \e[0m</code>,为白底闪烁下划线绿色的eee。</p><ul><li><code>\e[</code> :格式化字体的标识符</li><li><code>\e[32m</code> :表示将其后的字符串格式成给定的 32 格式。<ul><li>给的数字不同，则转换成不同的格式</li></ul></li><li><code>\e[0m</code> :表示取消格式，不然后面字符都会按上一个格式一直格式下去</li></ul><h2 id="不同数字对应的格式"><a href="#不同数字对应的格式" class="headerlink" title="不同数字对应的格式"></a>不同数字对应的格式</h2><div class="table-container"><table><thead><tr><th>背景色</th><th>字体颜色</th><th>其他</th></tr></thead><tbody><tr><td>40 黑色</td><td>30 黑色</td><td>0 恢复到默认值</td></tr><tr><td>41 红色</td><td>31 红色</td><td>1 粗体</td></tr><tr><td>42 绿色</td><td>32 绿色</td><td>2 设置一半的亮度</td></tr><tr><td>43 黄色</td><td>33 黄色</td><td>4 下划线</td></tr><tr><td>44 蓝色</td><td>34 蓝色</td><td>5 闪烁</td></tr><tr><td>45 紫色</td><td>35 紫色</td><td>7 反向图像</td></tr><tr><td>46 青色</td><td>36 青色</td><td>22 一般密度</td></tr><tr><td>47 白色</td><td>37 白色</td><td>25 关闭闪烁</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTex  笔记</title>
      <link href="/2018/10/04/markdown-latex/"/>
      <url>/2018/10/04/markdown-latex/</url>
      
        <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><p><strong> 行内式 </strong></p><div class="table-container"><table><thead><tr><th>语法</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td><strong>$</strong> … <strong>$</strong></td><td><strong>$</strong> y=x^2 <strong>$</strong></td><td>$ y=x^2 $</td></tr></tbody></table></div><p><strong> 块模式 </strong></p><pre><code>$$y=x^2$$</code></pre><p>渲染结果如下</p><script type="math/tex; mode=display">y=x^2</script><hr><h1 id="数学符号表示"><a href="#数学符号表示" class="headerlink" title="数学符号表示"></a>数学符号表示</h1><div class="table-container"><table><thead><tr><th>语法</th><th>结果</th></tr></thead><tbody><tr><td><strong>$</strong> x^2                            <strong>$</strong></td><td>$ x^2 $</td></tr><tr><td><strong>$</strong> x^{a+1}                        <strong>$</strong></td><td>$ x^{a+1} $</td></tr><tr><td><strong>$</strong> x_{1}                          <strong>$</strong></td><td>$ x_{1} $</td></tr><tr><td><strong>$</strong> \sqrt9                         <strong>$</strong></td><td>$ \sqrt9 $</td></tr><tr><td><strong>$</strong> \sqrt[3]9                      <strong>$</strong></td><td>$ \sqrt[3]9 $</td></tr><tr><td><strong>$</strong> \overline{m}                   <strong>$</strong></td><td>$ \overline{m} $</td></tr><tr><td><strong>$</strong> \underline{m}                  <strong>$</strong></td><td>$ \underline{m} $</td></tr><tr><td><strong>$</strong> \cdots                         <strong>$</strong></td><td>$ \cdots        $</td></tr><tr><td><strong>$</strong> \underbrace{a+b+\cdots+n}_{25} <strong>$</strong></td><td>$ \underbrace{a+b+\cdots+n}_{25} $</td></tr><tr><td><strong>$</strong> \vec a $                       <strong>$</strong></td><td>$ \vec a $</td></tr><tr><td><strong>$</strong> \overrightarrow{AB}            <strong>$</strong></td><td>$ \overrightarrow{AB} $</td></tr><tr><td><strong>$</strong> \frac{1}{2}                    <strong>$</strong></td><td>$ \frac{1}{2} $</td></tr><tr><td><strong>$</strong> \sum_{i=1}^{n}                 <strong>$</strong></td><td>$ \sum_{i=1}^{n} $</td></tr><tr><td><strong>$</strong>\displaystyle\sum_{i=1}^n       <strong>$</strong></td><td>$\displaystyle\sum_{i=1}^n$</td></tr><tr><td><strong>$</strong> \int_{0}^{n}                   <strong>$</strong></td><td>$ \int_{0}^{n} $</td></tr><tr><td><strong>$</strong>\prod_{\epsilon}                <strong>$</strong></td><td>$\prod_{\epsilon}$</td></tr></tbody></table></div><h2 id="小写希腊字母"><a href="#小写希腊字母" class="headerlink" title="小写希腊字母"></a>小写希腊字母</h2><div class="table-container"><table><thead><tr><th>语法</th><th>结果</th></tr></thead><tbody><tr><td><strong>$</strong> \alpha  <strong>$</strong></td><td>$ \alpha $</td></tr><tr><td><strong>$</strong> \beta   <strong>$</strong></td><td>$ \beta $</td></tr><tr><td><strong>$</strong> \theta  <strong>$</strong></td><td>$ \theta $</td></tr><tr><td><strong>$</strong> \delta  <strong>$</strong></td><td>$ \delta $</td></tr><tr><td><strong>$</strong> \lambda <strong>$</strong></td><td>$ \lambda $</td></tr><tr><td><strong>$</strong> \pi     <strong>$</strong></td><td>$ \pi $</td></tr></tbody></table></div><h2 id="二元关系符"><a href="#二元关系符" class="headerlink" title="二元关系符"></a>二元关系符</h2><div class="table-container"><table><thead><tr><th>语法</th><th style="text-align:center">结果</th><th>语法</th><th style="text-align:center">结果</th><th>语法</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td><strong>$</strong> &lt;           <strong>$</strong></td><td style="text-align:center">$ &lt; $</td><td><strong>$</strong> \subset      <strong>$</strong></td><td style="text-align:center">$\subset$</td><td><strong>$</strong> \vdash      <strong>$</strong></td><td style="text-align:center">$ \vdash $</td></tr><tr><td><strong>$</strong> &gt;           <strong>$</strong></td><td style="text-align:center">$ &gt; $</td><td><strong>$</strong> \supset      <strong>$</strong></td><td style="text-align:center">$\supset$</td><td><strong>$</strong> \dashv      <strong>$</strong></td><td style="text-align:center">$ \dashv $</td></tr><tr><td><strong>$</strong> =           <strong>$</strong></td><td style="text-align:center">$ = $</td><td><strong>$</strong> \approx      <strong>$</strong></td><td style="text-align:center">$\approx$</td><td><strong>$</strong> \models     <strong>$</strong></td><td style="text-align:center">$ \models $</td></tr><tr><td><strong>$</strong> \leq or \le <strong>$</strong></td><td style="text-align:center">$ \leq or \le$</td><td><strong>$</strong> \subseteq    <strong>$</strong></td><td style="text-align:center">$\subseteq$</td><td><strong>$</strong> \mid        <strong>$</strong></td><td style="text-align:center">$ \mid $</td></tr><tr><td><strong>$</strong> \geq or \ge <strong>$</strong></td><td style="text-align:center">$ \geq or \ge$</td><td><strong>$</strong> \supseteq    <strong>$</strong></td><td style="text-align:center">$\supseteq$</td><td><strong>$</strong> \parallel   <strong>$</strong></td><td style="text-align:center">$ \parallel $</td></tr><tr><td><strong>$</strong> \doteq      <strong>$</strong></td><td style="text-align:center">$ \doteq $</td><td><strong>$</strong> \cong        <strong>$</strong></td><td style="text-align:center">$\cong $</td><td><strong>$</strong> \perp       <strong>$</strong></td><td style="text-align:center">$ \perp $</td></tr><tr><td><strong>$</strong> \ll         <strong>$</strong></td><td style="text-align:center">$ \ll $</td><td><strong>$</strong> \sqsubset    <strong>$</strong></td><td style="text-align:center">$\sqsubset$</td><td><strong>$</strong> \smile      <strong>$</strong></td><td style="text-align:center">$ \smile $</td></tr><tr><td><strong>$</strong> \equiv      <strong>$</strong></td><td style="text-align:center">$ \equiv $</td><td><strong>$</strong> \Join        <strong>$</strong></td><td style="text-align:center">$\Join$</td><td><strong>$</strong> \asymp      <strong>$</strong></td><td style="text-align:center">$ \asymp $</td></tr><tr><td><strong>$</strong> \gg         <strong>$</strong></td><td style="text-align:center">$ \gg $</td><td><strong>$</strong> \sqsupset    <strong>$</strong></td><td style="text-align:center">$\sqsupset$</td><td><strong>$</strong> \frown      <strong>$</strong></td><td style="text-align:center">$ \frown $</td></tr><tr><td><strong>$</strong> \prec       <strong>$</strong></td><td style="text-align:center">$ \prec $</td><td><strong>$</strong> \sqsubseteq  <strong>$</strong></td><td style="text-align:center">$\sqsubseteq$</td><td><strong>$</strong> :           <strong>$</strong></td><td style="text-align:center">$ : $</td></tr><tr><td><strong>$</strong> \succ       <strong>$</strong></td><td style="text-align:center">$ \succ $</td><td><strong>$</strong> \sqsupseteq  <strong>$</strong></td><td style="text-align:center">$\sqsupseteq$</td><td><strong>$</strong> \notin      <strong>$</strong></td><td style="text-align:center">$ \notin $</td></tr><tr><td><strong>$</strong> \sim        <strong>$</strong></td><td style="text-align:center">$ \sim $</td><td><strong>$</strong> \bowtie      <strong>$</strong></td><td style="text-align:center">$\bowtie$</td><td><strong>$</strong> \neq or \ne <strong>$</strong></td><td style="text-align:center">$ \neq or \ne$</td></tr><tr><td><strong>$</strong> \preceq     <strong>$</strong></td><td style="text-align:center">$ \preceq $</td><td><strong>$</strong> \in          <strong>$</strong></td><td style="text-align:center">$\in$</td><td></td><td style="text-align:center"></td></tr><tr><td><strong>$</strong> \succeq     <strong>$</strong></td><td style="text-align:center">$ \succeq $</td><td><strong>$</strong> \ni or \owns <strong>$</strong></td><td style="text-align:center">$\ni or \owns$</td><td></td><td style="text-align:center"></td></tr><tr><td><strong>$</strong> \simeq      <strong>$</strong></td><td style="text-align:center">$ \simeq $</td><td><strong>$</strong> \propto      <strong>$</strong></td><td style="text-align:center">$\propto$</td><td></td><td style="text-align:center"></td></tr></tbody></table></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://katex.org/docs/supported.html" target="_blank" rel="noopener">https://katex.org/docs/supported.html</a></li><li><a href="http://www.mohu.org/info/symbols/symbols.htm" target="_blank" rel="noopener">http://www.mohu.org/info/symbols/symbols.htm</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ip 知识</title>
      <link href="/2018/08/23/os-ip/"/>
      <url>/2018/08/23/os-ip/</url>
      
        <content type="html"><![CDATA[<h1 id="ip-概述"><a href="#ip-概述" class="headerlink" title="ip 概述"></a>ip 概述</h1><p>ip 地址是由四段的10进制数字组成的地址，每段十进制占 8 bit，共 32 bit, 如:</p><pre><code># 十进制表示172.16.122.204# 二进制形式为10101100.00010000.01111010.11001100</code></pre><h1 id="ip-分类"><a href="#ip-分类" class="headerlink" title="ip 分类"></a>ip 分类</h1><div class="table-container"><table><thead><tr><th>类型</th><th>范围</th></tr></thead><tbody><tr><td>A</td><td>0.0.0.0 ~ 127.255.255.255</td></tr><tr><td>B</td><td>128.0.0.0 ~ 191.255.255.255</td></tr><tr><td>C</td><td>192.0.0.0 ~ 233.255.255.255</td></tr><tr><td>D</td><td>224.0.0.0 ~ 239.255.255.255</td></tr><tr><td>E</td><td>240.0.0.0 ~ 247.255.255.255</td></tr></tbody></table></div><h2 id="私有地址"><a href="#私有地址" class="headerlink" title="私有地址"></a>私有地址</h2><ul><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ul><h1 id="子网-及-子网掩码"><a href="#子网-及-子网掩码" class="headerlink" title="子网 及 子网掩码"></a>子网 及 子网掩码</h1><p>如： 192.168.0.22/24</p><ul><li>192.168.0.22 为主机地址</li><li>24 表示将前24为标记为网络号，即将32位的二进制的前24位为1其余为0，即<code>1111 1111.1111 1111.1111 1111.0000 0000</code>，转为十进制为<code>255.255.255.0</code></li></ul><p>将主机地址与子网掩码做二进制的与运算后，即可得到该子网的网络ip</p><pre><code>  1100 0000.1010 1000.0000 0000.1011 0000&amp; 1111 1111.1111 1111.1111 1111.0000 0000------------------------------------------  1100 0000.1010 1000.0000.0000.0000 0000转十进制为：192.168.0.0</code></pre><p>子网中最大的ip即为该子网的广播IP，经过以上计算可知：</p><pre><code>192.168.0.22/24的各参数如下子网掩码为 ：255.255.255.0子网数：1可用主机数：253最大可容纳主机数：255网络地址：192.168.0.0广播地址：192.168.0.255可用ip：192.168.0.1 ~ 192.168.0.244</code></pre>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>rails.5.2 之 master.key 文件</title>
      <link href="/2018/08/18/ruby-rails-5-2-master-key/"/>
      <url>/2018/08/18/ruby-rails-5-2-master-key/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自 <a href="https://ruby-china.org/topics/36081" target="_blank" rel="noopener">https://ruby-china.org/topics/36081</a></p></blockquote><p>先回顾在5.2版本以前，我们为了处理很多私密的信息，需要在.gitignore里加入多少的yml文件，有secrets.yml、database.yml、cable.yml，甚至会加入一些自定义的配置文件，如：application.yml。<br>然后在部署配置中：</p><pre><code>set :linked_files, fetch(:linked_files, []).push(&#39;config/database.yml&#39;, &#39;config/secrets.yml&#39;, &#39;config/cable.yml&#39;...)</code></pre><h1 id="把私密信息放入credentials中"><a href="#把私密信息放入credentials中" class="headerlink" title="把私密信息放入credentials中"></a>把私密信息放入credentials中</h1><p>因为我们在使用credentials.yml.enc后，可以把所有私密的信息都放到里面，然后通过master.key进行解密。所以当我们团队在一起完成一个项目时，需要分享master.key文件，但是考虑到安全的问题，不要把master.key上传到git的仓库中。</p><p>当我们打开credentials.yml.enc发现内容是一串随机串，如下：</p><pre><code>qEbH/+fadmlPVeMVgFvpwk4ADadW2LbMkzMKJKkHrZeFNooiKKJvOoe5YJlbab1wJLHL77nSohvEm6MYnl9krXLFnDG0iSWm/svtipruMCc1FVfhSpmXSvLNJI1RUk2VeZCFjYkT8/PG4N7oj1OLrSq4yeRsbKTrS/3izcMm9ndJkcd4/wR7WAMReQSRGt5YGNZ4E3Jt9Wgg7ls2okZcwxEv/3brdgIyHrmfyEWb50YSe5oDDyscfRNX70uwZieSVGn99fFcexYUL8F0dxSrVNaix/h/UAeApq6Ifhs0/p9eXk0349f8dEMFkp5A3I4j0ubgjZ/ncdLTct37OxxhfucWukCtP6oSFvpC+5ma2epjjTSJM25+Vv3GQy7xfSdwbsEq8jm3tqT/zGr2M9iRuEX+LJrxzhDHnHC0--jQ+G6M9HWGe7zlFb--ltdsqYuI+4O8cqw/bcJRJw==</code></pre><p>非常棒，secret_key_base之类的信息都在里面安全的保护着，可是如果我要修改里面的内容，怎么办？我们不可能直接修改加密后的内容啊。</p><p>不要着急，Rails这里给我们提供了一个方便的方法：EDITOR=”mate —wait” bin/rails credentials:edit。当然，EDITOR的信息需要根据我们使用的工具进行调整。</p><pre><code>EDITOR=vim bin/rails credentials:edit  # 使用VIM编辑EDITOR=&quot;subl --wait&quot; bin/rails credentials:edit  # 使用Sublime编辑</code></pre><p>输入命令后，我们可以清楚的看到里面的内容：</p><pre><code># aws:#   access_key_id: 123#   secret_access_key: 345# Used as the base secret for all MessageVerifiers in Rails, including the one protecting cookies.secret_key_base: 0b4d8892f41d7b89127b3ad997ca9ca581fe7f84bf890c85095b635c651a9de00edd1032aeb377a5753f</code></pre><p>然后在我们需要用到这些加密信息的地方，调用：<br>    Rails.application.credentials[Rails.env][:database][:database]<br>    Rails.application.credentials[Rails.env][:database][:password]</p><p>剩下部署的时候，就记得把master.key放到服务器里，不要弄丢了。</p>]]></content>
      
      
      <categories>
          
          <category> ruby </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>postgresql</title>
      <link href="/2018/08/11/db-postgresql/"/>
      <url>/2018/08/11/db-postgresql/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考 <a href="https://www.cnblogs.com/z-sm/archive/2016/07/05/5644165.html" target="_blank" rel="noopener">https://www.cnblogs.com/z-sm/archive/2016/07/05/5644165.html</a><br><a href="https://www.postgresql.org/docs/current/static/app-initdb.html" target="_blank" rel="noopener">postgressql 官网</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h1 id="mac-下安装与启动"><a href="#mac-下安装与启动" class="headerlink" title="mac 下安装与启动"></a>mac 下安装与启动</h1><ol><li>安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install postgresql -v</span><br></pre></td></tr></table></figure></li></ol><p>运行完以上命令后 posgresql就被安装到了 <code>/usr/local/Cellar/postgresql</code>下了,并建立了一个链接目录<code>/usr/local/opt/postgresql</code></p><ul><li>默认的数据库路径为<code>/usr/local/val/postgres</code></li><li>默认创建一个当前用户名同名的不带密码的数据库管理员账号</li><li>默认创建一个与当前用户名同名的数据库</li></ul><ol><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew services start postgres</span><br><span class="line"> 或者</span><br><span class="line">pg_ctl -D /usr/local/var/postgres start</span><br></pre></td></tr></table></figure></li><li><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew services stop postgres</span><br><span class="line"> 或者</span><br><span class="line">pg_ctl -D /usr/local/var/postgres stop</span><br></pre></td></tr></table></figure></li><li><p>进去客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认使用当前用户名，和当前用户名同名的数据库</span><br><span class="line">psql</span><br></pre></td></tr></table></figure></li></ol><h1 id="ubuntu-下安装与启动"><a href="#ubuntu-下安装与启动" class="headerlink" title="ubuntu 下安装与启动"></a>ubuntu 下安装与启动</h1><ol><li>安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install postgresql</span><br></pre></td></tr></table></figure></li></ol><p>安装成功后</p><ul><li>默认创建名为 postgres 的 linux 用户</li><li>默认创建名为 postgres 不带密码的默认数据库管理员账号</li><li>创建名为 postgres 的表</li><li>配置目录为<code>/etc/postgresql/9.5/main</code></li><li>默认数据库路径 <code>/var/lib/postgresql/9.5/main</code></li><li>默认 socket 为 <code>/var/run/postgresql</code></li><li>默认启动端口 5432</li></ul><ol><li><p>启动与停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service postgresql start</span><br><span class="line">sudo service postgresql stop</span><br></pre></td></tr></table></figure></li><li><p>进入客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 以postgres用户身份运行psql命令</span><br><span class="line">sudo -u postgres psql</span><br></pre></td></tr></table></figure></li></ol><h1 id="添加新用户和新数据库"><a href="#添加新用户和新数据库" class="headerlink" title="添加新用户和新数据库"></a>添加新用户和新数据库</h1><h2 id="通过-psql-客户端添加"><a href="#通过-psql-客户端添加" class="headerlink" title="通过 psql 客户端添加"></a>通过 psql 客户端添加</h2><p>进入客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql</span><br></pre></td></tr></table></figure></p><p>创建用户 <strong>exampleuser</strong> 并设置密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user exampleuser whith password &apos;123456&apos;;</span><br></pre></td></tr></table></figure></p><p>创建数据库 <strong>exampledb</strong> ，所有者为 exampleuser<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database exampledb owner exampleuser;</span><br></pre></td></tr></table></figure></p><p>将exampledb数据库所有权赋予exampleuser，否则exampleuser只能登陆不能操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on database exampledb to exampleuser;</span><br></pre></td></tr></table></figure></p><h2 id="通过shell命令行添加"><a href="#通过shell命令行添加" class="headerlink" title="通过shell命令行添加"></a>通过shell命令行添加</h2><p>postgreql 安装后，提供 <code>createuser</code> 和 <code>createdb</code> 命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 以postgres用户身份运行createuser命令创建exampleuser，并指定为超级用户</span><br><span class="line">sudo -u postgres createuser --superuser exampleuser</span><br><span class="line"># 以postgres用户身份运行createdb命令创建exampledb数据库，并指定为所有者为exampleuser</span><br><span class="line">sudo -u postgres createdb -O exampleuser exampledb</span><br></pre></td></tr></table></figure></p><h1 id="psql"><a href="#psql" class="headerlink" title="psql"></a>psql</h1><p>安装完后会有PostgreSQL的客户端psql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432</span><br></pre></td></tr></table></figure></p><ul><li>dbuser 数据库账号</li><li>exampledb 数据库的名称</li><li>127.0.0.1 数据库的主机ip</li><li>5432 数据库的端口号</li></ul><blockquote><p>如果仅输入<code>psql</code>,相当于以当前用户名作为登陆账号，指定的数据库为与当前用户名同名的数据库，若不存在这两项则报错。</p></blockquote><h1 id="客户端操作命令"><a href="#客户端操作命令" class="headerlink" title="客户端操作命令"></a>客户端操作命令</h1><p>数据库的增删改查与SQL语法一致，以下是一些特定的语法</p><pre><code># 设置密码\password# 退出客户端\q# 查看SQL命令解释，如 \h select\h &lt;command&gt;# 查看psql命令列表\?# 列出所有数据库，相当与show databases\l# 链接到其他数据库，相当于 use dbname\c &lt;dbname&gt;# 列出当前数据库的所有表, 相当于 show tables;\d# 列出某个表的结构，相当于 desc &lt;table name&gt;\d &lt;table name&gt;# 列出当前所有用户\du# 打开文本编辑器\e# 列出当前数据库和链接信息\conninfo</code></pre><h1 id="initdb"><a href="#initdb" class="headerlink" title="initdb"></a>initdb</h1><p>postgresql 安装后提供 <code>initdb</code> 命令，可用于初始化一个数据库，而不使用默认的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initdb --locale=C -E utf-8 &lt;postgres_data_dir&gt;</span><br></pre></td></tr></table></figure><p><strong>postgres_data_dir</strong>: 数据的保存路径，使用绝对路径</p><p>执行完以上命令后，在指定目录下就初始化了一个postgresql数据库，里面包括了配置文件等，与系统默认的postgresql独立开来。</p><p>待更新 。。。</p>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> psql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ifconfig</title>
      <link href="/2018/08/11/linux-cmd-ifconfig/"/>
      <url>/2018/08/11/linux-cmd-ifconfig/</url>
      
        <content type="html"><![CDATA[<p>ifconfig命令被用于配置和显示Linux内核中网络接口的网络参数</p><p>使用格式 <code>ifconfig [网络设备] [参数]</code></p><p>在命令行输入 ifconfig 可以看到如下输出</p><pre><code>eth0    Link encap:Ethernet  HWaddr 00:16:3e:08:09:42        inet addr:172.18.179.43  Bcast:172.18.191.255  Mask:255.255.240.0        UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1        RX packets:5670311 errors:0 dropped:0 overruns:0 frame:0        TX packets:3032111 errors:0 dropped:0 overruns:0 carrier:0        collisions:0 txqueuelen:1000        RX bytes:3922309247 (3.9 GB)  TX bytes:2221955398 (2.2 GB)lo      Link encap:Local Loopback        inet addr:127.0.0.1  Mask:255.0.0.0        UP LOOPBACK RUNNING  MTU:65536  Metric:1        RX packets:728000 errors:0 dropped:0 overruns:0 frame:0        TX packets:728000 errors:0 dropped:0 overruns:0 carrier:0        collisions:0 txqueuelen:1        RX bytes:473042785 (473.0 MB)  TX bytes:473042785 (473.0 MB)</code></pre><ul><li><strong>eth0</strong>表示第一块网卡，其中<strong>HWaddr</strong>表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是00:16:3e:08:09:42。</li><li><strong>Link encap</strong> 表示网络类型是：Ethernet</li><li><strong>HWaddr</strong> 表示网卡的物理地址是00:16:3e:08:09:42。(一般前三段表示厂商，后三段表示生产的流水线)</li><li><strong>inet addr</strong> 表示网卡的IP地址是172.18.179.43</li><li><strong>Bcast</strong> 表示网卡的广播地址是:172.18.191.255</li><li><strong>Mask</strong> 表示子网掩码是:255.255.240.0</li><li><strong>MTU</strong> 最大发送单元</li></ul><hr><p><strong>lo</strong>是表示主机的回环地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 httpd服务器的指定到回环地址，在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。</p><p>第一行：连接类型：Ethernet（以太网）HWaddr（硬件mac地址）。<br>第二行：网卡的IP地址、子网、掩码。<br>第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）MTU:1500（最大传输单元）：1500字节。<br>第四、五行：接收、发送数据包情况统计。<br>第七行：接收、发送数据字节数统计信息。</p><p>etho网卡的配置文件路径为 <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> cmd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ruby Devise 登陆验证框架</title>
      <link href="/2018/08/05/ruby-rails-devise/"/>
      <url>/2018/08/05/ruby-rails-devise/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考 <a href="https://github.com/plataformatec/devise" target="_blank" rel="noopener">https://github.com/plataformatec/devise</a><br>参考 <a href="https://www.jianshu.com/p/8dfff067197d" target="_blank" rel="noopener">https://www.jianshu.com/p/8dfff067197d</a></p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>devise 是一个用于登陆验证的 ruby gem包</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ol><li><p>在 Gemfile 中加入以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem devise</span><br></pre></td></tr></table></figure></li><li><p>然后执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 下载安装 devise</span><br><span class="line">bundle instll</span><br><span class="line"># 初始化 devise</span><br><span class="line">rails generate devise:install</span><br><span class="line"># 生成一个 user 模型</span><br><span class="line">rails g devise user</span><br><span class="line"># 执行迁移命令</span><br><span class="line">bundle exec rake db:migrate</span><br><span class="line"># 执行devise提供的脚手架，生成相关视图</span><br><span class="line">rails g devise:views</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>还需要定义在路由配置中定义好root path(如<code>root to: &quot;home#index&quot;</code>), 因为 devise 默认登陆成功后重定向到root_path，当然也可以在controller中定义<code>after_sign_in_path_for</code> 和 <code>after_sign_out_path_for</code> 方法，来重新定义用户登陆和退出后重定向的path。</p></blockquote><p>当执行完以上命令后，devise 就可以使用了，以下是devise提供几个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 通过在需要做登陆验证的控制器中加入这句代码，开启登陆验证</span><br><span class="line">before_action :authenticate_user!</span><br><span class="line"># 用于判断用户是否已登陆</span><br><span class="line">user_signed_in?</span><br><span class="line"># 获取当前登陆的用户</span><br><span class="line">current_user</span><br><span class="line"># 当前用户的存储域</span><br><span class="line">user_session</span><br></pre></td></tr></table></figure></p><h1 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h1><h2 id="使用用户名登陆而不是使用邮箱登陆"><a href="#使用用户名登陆而不是使用邮箱登陆" class="headerlink" title="使用用户名登陆而不是使用邮箱登陆"></a>使用用户名登陆而不是使用邮箱登陆</h2><ol><li><p>添加一个用于登陆验证的username字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rails generate migration add_username_to_users username:string</span><br><span class="line">bundle exec rake db:migrate</span><br></pre></td></tr></table></figure></li><li><p>在config/initializers/devise.rb中配置登录验证的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.authentication_keys = [:username]</span><br></pre></td></tr></table></figure></li><li><p>在view试图中将表单中的email改为username</p></li><li><p>修改完之后，接下来需要重写一个方法，用来配置登录和注册所允许的参数，将此方法写在application_controller.rb中</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> &lt; ActionController::Base</span></span><br><span class="line">  before_action <span class="symbol">:authenticate_user!</span></span><br><span class="line">  before_action <span class="symbol">:configure_permitted_parameters</span>, <span class="symbol">if:</span> <span class="symbol">:devise_controller?</span></span><br><span class="line"></span><br><span class="line">  protected</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">configure_permitted_parameters</span></span></span><br><span class="line">    devise_parameter_sanitizer.permit(<span class="symbol">:sign_up</span>, <span class="symbol">keys:</span> [<span class="symbol">:username</span>, <span class="symbol">:email</span>, <span class="symbol">:password</span>, <span class="symbol">:password_confirmation</span>, <span class="symbol">:remember_me</span>])</span><br><span class="line">    devise_parameter_sanitizer.permit(<span class="symbol">:sign_in</span>, <span class="symbol">keys:</span> [<span class="symbol">:username</span>, <span class="symbol">:password</span>, <span class="symbol">:remember_me</span>])</span><br><span class="line">    devise_parameter_sanitizer.permit(<span class="symbol">:account_update</span>, <span class="symbol">keys:</span> [<span class="symbol">:username</span>, <span class="symbol">:password</span>, <span class="symbol">:password_confirmation</span>, <span class="symbol">:current_password</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> ruby </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mac 安装 chrome</title>
      <link href="/2018/07/21/mac-install-chrome/"/>
      <url>/2018/07/21/mac-install-chrome/</url>
      
        <content type="html"><![CDATA[<h1 id="将允许安装来源设置为任何来源"><a href="#将允许安装来源设置为任何来源" class="headerlink" title="将允许安装来源设置为任何来源"></a>将允许安装来源设置为<code>任何来源</code></h1><p>打开终端运行以下命令</p><pre><code>sudo spctl --master-disable</code></pre><p>打开 <code>系统偏好设置 &gt; 安全性与隐私</code> 可看到下图中的任何来源被选中。</p><p><img src="/images/iso-spctl-1.jpg" alt="iso setting"></p><p>如果要关闭，可允许以下命令</p><pre><code>sudo spctl --master-enable</code></pre><p>打开 <code>系统偏好设置 &gt; 安全性与隐私</code> 可看到下图中的任何来源已经消失了。</p><p><img src="/images/iso-spctl-2.jpg" alt="iso setting"></p><h1 id="下载-chrome"><a href="#下载-chrome" class="headerlink" title="下载 chrome"></a>下载 chrome</h1><blockquote><p><a href="https://chrome.en.softonic.com/mac/download" target="_blank" rel="noopener">https://chrome.en.softonic.com/mac/download</a></p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>点击下载好的文件即可安装。</p><p>安装好后可将允许任何来源安装关闭，并不会影响后续使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch 安装与启动</title>
      <link href="/2018/07/18/db-elasticsearch/"/>
      <url>/2018/07/18/db-elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Elasticsearch 是一个分布式、可扩展、实时的搜索与数据分析引擎，同时它也是 ELK 日志系统的一部分。</p><h1 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h1><h2 id="安装-JDK-amp-配置-JAVA-HOME"><a href="#安装-JDK-amp-配置-JAVA-HOME" class="headerlink" title="安装 JDK &amp; 配置 JAVA_HOME"></a>安装 JDK &amp; 配置 JAVA_HOME</h2><ol><li>到<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Oracle</a>下载 JDK<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate --no-cookies --header <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie"</span> http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li></ol><ul><li>参数说明：<ul><li>–no-check-certificate #不检查证书</li><li>—no-cookies          #不使用 cookies.</li><li>—header String       #设置请求头，模拟一个cookie</li></ul></li></ul><ol><li><p>解压 JDK 源码包到<code>/usr/local/java</code>路径下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/local/java</span><br></pre></td></tr></table></figure></li><li><p>在 <code>/etc/profile</code> 文件末尾加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_181</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>运行以下命令，是修改后的文件生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>测试 JDK 是否安装成功,在任意位置输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果显示java版本则代表安装成功了</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></li></ol><h1 id="安装-amp-运行"><a href="#安装-amp-运行" class="headerlink" title="安装 &amp; 运行"></a>安装 &amp; 运行</h1><ol><li><p><a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">下载源码包</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.1.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf elasticsearch-6.3.1.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>启动 elasticsearch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-6.3.1/</span><br><span class="line">bin/elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>测试是否启动成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>得到以下输出，表示启动成功：</p><p>  {<br>  “name” : “zmv4Idf”,<br>  “cluster_name” : “elasticsearch”,<br>  “cluster_uuid” : “oGYeMyYbTsKKIhms0yh8Pw”,<br>  “version” : {</p><pre><code>&quot;number&quot; : &quot;6.3.1&quot;,&quot;build_flavor&quot; : &quot;default&quot;,&quot;build_type&quot; : &quot;tar&quot;,&quot;build_hash&quot; : &quot;eb782d0&quot;,&quot;build_date&quot; : &quot;2018-06-29T21:59:26.107521Z&quot;,&quot;build_snapshot&quot; : false,&quot;lucene_version&quot; : &quot;7.3.1&quot;,&quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,&quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</code></pre><p>  },<br>  “tagline” : “You Know, for Search”<br>  }</p></li></ul><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ul><li><a href="https://www.elastic.co/guide/cn/index.html" target="_blank" rel="noopener">elasticsearch 文档</a></li><li><a href="https://es.xiaoleilu.com/010_Intro/00_README.html" target="_blank" rel="noopener">elasticsearch 参考</a></li><li><a href="https://es.xiaoleilu.com/010_Intro/00_README.html" target="_blank" rel="noopener">es gitbook</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> Base </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages 搭建个人博客</title>
      <link href="/2018/07/17/github-pages/"/>
      <url>/2018/07/17/github-pages/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 是一种静态站点托管服务，旨在直接从GitHub存储库托管您的个人，组织或项目页面,详细的文档可阅读 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a>文档。</p><p>利用 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 搭建个人博客的主流方案有以下两种：</p><ul><li><a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> + <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a></li><li><a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> + <a href="https://jekyllrb.com/docs/home/" target="_blank" rel="noopener">jekyll</a></li></ul><h1 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h1><blockquote><p>参考 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Help</a></p></blockquote><p><a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 的使用基本有以下三种方式：</p><ul><li>通过创建一个名为 <code>&lt;yourname&gt;.github.io</code> 的项目</li><li>通过在任一项目中创建一个名为  <code>gh-pages</code> 的分支</li><li>通过在任一项目的 <code>master</code> 分支中，创建一个名为 <code>docs</code> 的文件夹</li></ul><p>以上三种方式都可以启用 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 功能，当然三个也可以同时使用，拥有多个 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a>, 但通常我们使用第一种方式来搭建一个个人的博客。</p><p>接下来我们列举每一种方式的使用。</p><h2 id="创建-lt-yourname-gt-github-io-项目使用-GitHub-Pages"><a href="#创建-lt-yourname-gt-github-io-项目使用-GitHub-Pages" class="headerlink" title="创建 &lt;yourname&gt;.github.io 项目使用 GitHub Pages"></a>创建 <code>&lt;yourname&gt;.github.io</code> 项目使用 GitHub Pages</h2><p>通过创建一个名为 <code>&lt;yourname&gt;.github.io</code> 的项目的方式来使用 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 主要包含以下几步：</p><ol><li>注册一个 github 账号</li><li>创建一个 <code>&lt;yourname&gt;.github.io</code> 的工程</li><li>在工程的 <code>master</code> 分支根目录下创建一个 <code>index.html</code> 或 <code>index.md</code> 的文件</li><li>访问<code>http://&lt;yourname&gt;.github.io</code> 就可以看到你的页面了</li></ol><p><strong>注：</strong></p><ul><li>这种方式 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 使用的是 <code>master</code> 分支</li><li><code>master</code> 根目录下必须要有 <code>index.html</code> 或 <code>index.md</code> 的文件。</li><li><code>&lt;yourname&gt;.github.io</code> 中的 <code>&lt;yourname&gt;</code> 应该和图中箭头标志部分一致，设置不对，<a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 不会生效。</li></ul><p><img src="/images/github-page.jpg" alt="your github name"></p><h2 id="创建-gh-pages-分支使用-GitHub-Pages"><a href="#创建-gh-pages-分支使用-GitHub-Pages" class="headerlink" title="创建 gh-pages 分支使用 GitHub Pages"></a>创建 <code>gh-pages</code> 分支使用 GitHub Pages</h2><p>通过创建一个名为 <code>gh-pages</code> 分支的方式来使用 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 主要包含以下几步：</p><ol><li>注册一个 github 账号</li><li>在一个新工程(工程名随意)或在已有工程中拉取一个名为 <code>gh-pages</code> 的分支</li><li>在 <code>gh-pages</code> 分支的根目录下创建一个 <code>index.html</code> 或 <code>index.md</code> 的文件</li><li>检查 project 的 <code>setting</code> 中的 <code>GitHub Pages</code> 部分正确设置了分支，如图：</li></ol><p><img src="/images/gh-pages-seting-brh.jpg" alt="GitHub Pages setting"></p><ol><li>访问<code>http://&lt;yourname&gt;.github.io/&lt;projectName&gt;</code> 就可以看到你的页面了</li></ol><p><strong>注：</strong></p><ul><li>这种方式 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 使用的是 <code>gh-pages</code> 分支</li><li>分支名必须为 <code>gh-pages</code></li><li><code>http://&lt;yourname&gt;.github.io/&lt;projectName&gt;</code> 中 <code>yourname</code>  见<a href="#创建-lt-yourname-gt-github-io-项目使用-GitHub-Help">前面的描述</a>,<code>projectName</code> 为 <code>gh-pages</code> 分支所在项目的项目名。</li><li><code>gh-pages</code> 根目录下必须要有 <code>index.html</code> 或 <code>index.md</code> 的文件。</li></ul><h2 id="创建-docs-文件夹使用-GitHub-Pages"><a href="#创建-docs-文件夹使用-GitHub-Pages" class="headerlink" title="创建 docs 文件夹使用 GitHub Pages"></a>创建 <code>docs</code> 文件夹使用 GitHub Pages</h2><p>通过创建一个名为 <code>docs</code> 文件中的方式来使用 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 主要包含以下几步：</p><ol><li>注册一个 github 账号</li><li>在一个新工程(工程名随意)或在已有工程的 <code>master</code> 下，创建一个名为 <code>docs</code> 的文件夹</li><li>在 <code>docs</code> 文件中创建一个名为 <code>index.md</code> 的文件</li><li>检查 project 的 <code>setting</code> 中的 <code>GitHub Pages</code> 部分正确设置了分支，如图：</li></ol><p><img src="/images/gh-pages-doc.jpg" alt="GitHub Pages setting"></p><ol><li>访问<code>http://&lt;yourname&gt;.github.io/&lt;projectName&gt;</code> 就可以看到你的页面了</li></ol><p><strong>注：</strong></p><ul><li>这种方式 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages</a> 使用的是 <code>master</code> 分支下 <code>docs</code> 文件夹中的文件。</li><li>文件夹名必须为 <code>docs</code></li><li><code>http://&lt;yourname&gt;.github.io/&lt;projectName&gt;</code> 中 <code>yourname</code>  见<a href="#创建-lt-yourname-gt-github-io-项目使用-GitHub-Help">前面的描述</a>,<code>projectName</code> 为 <code>gh-pages</code> 分支所在项目的项目名。</li><li><code>docs</code> 根目录下应该有 <code>index.md</code> 文件。</li></ul><h2 id="GitHub-Pages-绑定自己的域名"><a href="#GitHub-Pages-绑定自己的域名" class="headerlink" title="GitHub Pages 绑定自己的域名"></a>GitHub Pages 绑定自己的域名</h2><ol><li>购买域名</li><li>将域名解析映射到你 github pages 的网址。</li><li>在你 github pages 中设置里的 Custom domain 填写购买的域名即可。</li></ol><h1 id="GitHub-Pages-jekyll"><a href="#GitHub-Pages-jekyll" class="headerlink" title="GitHub Pages + jekyll"></a>GitHub Pages + jekyll</h1><p>通过利用 GitHub Pages + jekyll ，很轻松得就可以搭建一个个人的博客。<br><a href="https://jekyllrb.com/docs/home/" target="_blank" rel="noopener">jekyll</a> 是一个 <a href="http://www.ruby-lang.org/zh_cn/" target="_blank" rel="noopener">ruby</a> 的 <a href="https://rubygems.org/" target="_blank" rel="noopener">gem</a> 包，所有在使用前，需要你机器中安装了 ruby。</p><h2 id="安装-ruby"><a href="#安装-ruby" class="headerlink" title="安装 ruby"></a>安装 ruby</h2><p>ruby的安装可参考：</p><ul><li><a href="http://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="noopener">ruby-lang.org</a></li><li><a href="https://ruby-china.org/wiki/rvm-guide" target="_blank" rel="noopener">rvm 管理 ruby</a></li><li><a href="https://ruby-china.org/wiki/rbenv-guide" target="_blank" rel="noopener">rbenv 管理 ruby</a></li></ul><p>安装好 ruby 后，运行以下命令，应该就可以看到 ruby 和 gem 的版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby -v</span><br><span class="line">gem -v</span><br></pre></td></tr></table></figure></p><h2 id="安装-jekyll"><a href="#安装-jekyll" class="headerlink" title="安装 jekyll"></a>安装 jekyll</h2><p>参考资料：</p><ul><li>可参考<a href="https://gems.ruby-china.com/" target="_blank" rel="noopener">ruby-china</a>配置 gem 源，这样安装的时候会快些</li><li><a href="https://jekyllrb.com/docs/installation/" target="_blank" rel="noopener">jekyll 文档</a></li></ul><p>执行以下命令安装 jekyll：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install jekyll bundler</span><br></pre></td></tr></table></figure></p><p>查看 jekyll 和 bundler 版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jekyll -v</span><br><span class="line">bundle -v</span><br></pre></td></tr></table></figure></p><h2 id="创建一个-jekyll-项目"><a href="#创建一个-jekyll-项目" class="headerlink" title="创建一个 jekyll 项目"></a>创建一个 jekyll 项目</h2><p>运行下面命令，新建一个 jekyll 项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jekyll new proj</span><br></pre></td></tr></table></figure></p><p>得到的项目目录结构大概像下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proj</span><br><span class="line">├── 404.html</span><br><span class="line">├── about.md</span><br><span class="line">├── _config.yml</span><br><span class="line">├── Gemfile</span><br><span class="line">├── Gemfile.lock</span><br><span class="line">├── index.md</span><br><span class="line">└── _posts</span><br><span class="line">    └── 2018-07-18-welcome-to-jekyll.markdown</span><br></pre></td></tr></table></figure></p><h2 id="在github上创建-lt-yourname-gt-github-io工程"><a href="#在github上创建-lt-yourname-gt-github-io工程" class="headerlink" title="在github上创建&lt;yourname&gt;.github.io工程"></a>在github上创建<code>&lt;yourname&gt;.github.io</code>工程</h2><p>这里可参考前文的介绍</p><h2 id="将jekyll-项目推送到github上"><a href="#将jekyll-项目推送到github上" class="headerlink" title="将jekyll 项目推送到github上"></a>将jekyll 项目推送到github上</h2><p>在github上新建新建一个<code>&lt;yourname&gt;.github.io</code>的工程，然后将proj下的所有文件推到你新建工程的<code>master</code>分支中。访问<code>http://&lt;yourname&gt;.github.io</code>即可看到页面。</p><h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><p>访问<code>http://&lt;yourname&gt;.github.io</code>可看到你的github pages页面，如果要做本地预览，可运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jekyll serve</span><br></pre></td></tr></table></figure></p><p>访问 <code>http://localhost:4000</code> 即可。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li>除了 上述列出的文件是必须推送到github外，其他开发过程中生成的文件，可选择性忽略或推送上去</li><li>更多 jekyll 使用，可参考 <a href="https://jekyllrb.com/docs/home/" target="_blank" rel="noopener">jekyll 文档</a></li><li>要写博客，直接在<code>_posts</code>文件夹下，新建一个 <code>yyyy-mm-dd-your-post-name.md</code>的文件即可。</li><li>新加的文章，文件名必须以<code>yyyy-mm-dd-</code>的形式开头</li></ul><h1 id="GitHub-Pages-Hexo"><a href="#GitHub-Pages-Hexo" class="headerlink" title="GitHub Pages + Hexo"></a>GitHub Pages + Hexo</h1><p>利用 GitHub Pages + Hexo 的方式，也是可以很方便搭建和管理个人博客的。<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a> 是一个 npm 包，使用 hexo 需要安装 <a href="http://nodejs.cn/" target="_blank" rel="noopener">nodejs</a> 和 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>。</p><h2 id="安装-nodejs-和-npm"><a href="#安装-nodejs-和-npm" class="headerlink" title="安装 nodejs 和 npm"></a>安装 nodejs 和 npm</h2><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">nodejs</a> 和 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> 的按装可参考：</p><ul><li><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></li></ul><p>通常NPM是随同NodeJS一起安装的，所以当你按装好nodejs后，npm也随之安装好了。</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>Hexo 有详细中文文档这里就不细介绍，可参考</p><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文文档</a></li></ul><h2 id="创建一个-Hexo-工程"><a href="#创建一个-Hexo-工程" class="headerlink" title="创建一个 Hexo 工程"></a>创建一个 Hexo 工程</h2><p>运行下面命令，新建一个 Hexo 项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init proj</span><br></pre></td></tr></table></figure></p><p>得到的项目目录下至少会包含以下目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_config.yml  node_modules  package.json  package-lock.json  scaffolds  source  themes</span><br></pre></td></tr></table></figure></p><h2 id="在github上创建-lt-yourname-gt-github-io工程-1"><a href="#在github上创建-lt-yourname-gt-github-io工程-1" class="headerlink" title="在github上创建&lt;yourname&gt;.github.io工程"></a>在github上创建<code>&lt;yourname&gt;.github.io</code>工程</h2><p>这里可参考前文的介绍</p><h2 id="发布到-guthub-pages"><a href="#发布到-guthub-pages" class="headerlink" title="发布到 guthub pages"></a>发布到 guthub pages</h2><p>hexo 与 jekyll 不同，不能直接通过推送整个工程，来生成博客。可通过以下两种方式发布：</p><ol><li>运行 <code>hexo generate</code> 生成所有静态文件到public文件夹中，然后将public下的所有文件推送到<code>&lt;yourname&gt;.github.io</code>工程的master分支中。</li><li>同配置hexo，运行 <code>hexo deploy</code>,自动发布（推荐使用）</li></ol><p>接下来详细说明第二种，以 git 为例，更多可参考<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">hexo 部署</a>。</p><ol><li><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>_config.yml</code> 文件中的以下部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:chen-kunhui/chen-kunhui.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><p>注：将 repo 部分更换成你工程的 clone 链接。</p><ol><li>运行以下命令部署<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li></ol><p>注： 如果部署没生效，可运行<code>hexo clean</code> 再运行上面命令。</p><ol><li>访问 <code>http://&lt;yourname&gt;.github.io</code> 即可看到部署的页面。</li></ol><h2 id="本地预览-1"><a href="#本地预览-1" class="headerlink" title="本地预览"></a>本地预览</h2><p>访问<code>http://&lt;yourname&gt;.github.io</code>可看到你的github pages页面，如果要做本地预览，可运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><p>访问 <code>http://localhost:4000</code> 即可。</p><h2 id="备注-1"><a href="#备注-1" class="headerlink" title="备注"></a>备注</h2><p>详细使用，可阅读<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo 文档</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>GitHub Pages 网站受有使用限制：</p><ul><li>GitHub Pages源存储库的限制为1GB。</li><li>发布的GitHub Pages网站可能不超过1GB。</li><li>GitHub的网页的网站有一个每月100GB的带宽限制。</li><li>GitHub Pages网站的限制为每小时10个版本。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Base </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
